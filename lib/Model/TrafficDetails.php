<?php
/**
 * TrafficDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * TrafficDetails Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TrafficDetails extends AbstractDetails implements ArrayAccess
{
    const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TrafficDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'called_party' => 'string',
        'calling_party' => 'string',
        'cli_suppressed' => 'bool',
        'fnf_rating' => 'bool',
        'group_id' => 'int',
        'location_network' => 'string',
        'pool_id' => 'int',
        'roaming' => 'bool',
        'tariff_id' => 'int',
        'traffic_type' => '\iNew\Rest6_1\Model\CallType'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'called_party' => 'calledParty',
        'calling_party' => 'callingParty',
        'cli_suppressed' => 'cliSuppressed',
        'fnf_rating' => 'fnfRating',
        'group_id' => 'groupId',
        'location_network' => 'locationNetwork',
        'pool_id' => 'poolId',
        'roaming' => 'roaming',
        'tariff_id' => 'tariffId',
        'traffic_type' => 'trafficType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'called_party' => 'setCalledParty',
        'calling_party' => 'setCallingParty',
        'cli_suppressed' => 'setCliSuppressed',
        'fnf_rating' => 'setFnfRating',
        'group_id' => 'setGroupId',
        'location_network' => 'setLocationNetwork',
        'pool_id' => 'setPoolId',
        'roaming' => 'setRoaming',
        'tariff_id' => 'setTariffId',
        'traffic_type' => 'setTrafficType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'called_party' => 'getCalledParty',
        'calling_party' => 'getCallingParty',
        'cli_suppressed' => 'getCliSuppressed',
        'fnf_rating' => 'getFnfRating',
        'group_id' => 'getGroupId',
        'location_network' => 'getLocationNetwork',
        'pool_id' => 'getPoolId',
        'roaming' => 'getRoaming',
        'tariff_id' => 'getTariffId',
        'traffic_type' => 'getTrafficType'
    ];

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['called_party'] = isset($data['called_party']) ? $data['called_party'] : null;
        $this->container['calling_party'] = isset($data['calling_party']) ? $data['calling_party'] : null;
        $this->container['cli_suppressed'] = isset($data['cli_suppressed']) ? $data['cli_suppressed'] : null;
        $this->container['fnf_rating'] = isset($data['fnf_rating']) ? $data['fnf_rating'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['location_network'] = isset($data['location_network']) ? $data['location_network'] : null;
        $this->container['pool_id'] = isset($data['pool_id']) ? $data['pool_id'] : null;
        $this->container['roaming'] = isset($data['roaming']) ? $data['roaming'] : null;
        $this->container['tariff_id'] = isset($data['tariff_id']) ? $data['tariff_id'] : null;
        $this->container['traffic_type'] = isset($data['traffic_type']) ? $data['traffic_type'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('type', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = parent::listInvalidProperties();

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets called_party
     * @return string
     */
    public function getCalledParty()
    {
        return $this->container['called_party'];
    }

    /**
     * Sets called_party
     * @param string $called_party the called party
     * @return $this
     */
    public function setCalledParty($called_party)
    {
        $this->container['called_party'] = $called_party;

        return $this;
    }

    /**
     * Gets calling_party
     * @return string
     */
    public function getCallingParty()
    {
        return $this->container['calling_party'];
    }

    /**
     * Sets calling_party
     * @param string $calling_party the calling party
     * @return $this
     */
    public function setCallingParty($calling_party)
    {
        $this->container['calling_party'] = $calling_party;

        return $this;
    }

    /**
     * Gets cli_suppressed
     * @return bool
     */
    public function getCliSuppressed()
    {
        return $this->container['cli_suppressed'];
    }

    /**
     * Sets cli_suppressed
     * @param bool $cli_suppressed true, if the CLI was suppressed; false otherwise
     * @return $this
     */
    public function setCliSuppressed($cli_suppressed)
    {
        $this->container['cli_suppressed'] = $cli_suppressed;

        return $this;
    }

    /**
     * Gets fnf_rating
     * @return bool
     */
    public function getFnfRating()
    {
        return $this->container['fnf_rating'];
    }

    /**
     * Sets fnf_rating
     * @param bool $fnf_rating true, if the traffic event is under FnF rating; false otherwise
     * @return $this
     */
    public function setFnfRating($fnf_rating)
    {
        $this->container['fnf_rating'] = $fnf_rating;

        return $this;
    }

    /**
     * Gets group_id
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     * @param int $group_id the group ID
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets location_network
     * @return string
     */
    public function getLocationNetwork()
    {
        return $this->container['location_network'];
    }

    /**
     * Sets location_network
     * @param string $location_network the location network name
     * @return $this
     */
    public function setLocationNetwork($location_network)
    {
        $this->container['location_network'] = $location_network;

        return $this;
    }

    /**
     * Gets pool_id
     * @return int
     */
    public function getPoolId()
    {
        return $this->container['pool_id'];
    }

    /**
     * Sets pool_id
     * @param int $pool_id the pool ID
     * @return $this
     */
    public function setPoolId($pool_id)
    {
        $this->container['pool_id'] = $pool_id;

        return $this;
    }

    /**
     * Gets roaming
     * @return bool
     */
    public function getRoaming()
    {
        return $this->container['roaming'];
    }

    /**
     * Sets roaming
     * @param bool $roaming whether the event initiator was roaming
     * @return $this
     */
    public function setRoaming($roaming)
    {
        $this->container['roaming'] = $roaming;

        return $this;
    }

    /**
     * Gets tariff_id
     * @return int
     */
    public function getTariffId()
    {
        return $this->container['tariff_id'];
    }

    /**
     * Sets tariff_id
     * @param int $tariff_id the tariff id
     * @return $this
     */
    public function setTariffId($tariff_id)
    {
        $this->container['tariff_id'] = $tariff_id;

        return $this;
    }

    /**
     * Gets traffic_type
     * @return \iNew\Rest6_1\Model\CallType
     */
    public function getTrafficType()
    {
        return $this->container['traffic_type'];
    }

    /**
     * Sets traffic_type
     * @param \iNew\Rest6_1\Model\CallType $traffic_type the traffic type
     * @return $this
     */
    public function setTrafficType($traffic_type)
    {
        $this->container['traffic_type'] = $traffic_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


