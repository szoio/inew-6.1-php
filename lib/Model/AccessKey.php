<?php
/**
 * AccessKey
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * AccessKey Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccessKey implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AccessKey';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_role' => '\iNew\Rest6_1\Model\AccessRole',
        'access_rules' => '\iNew\Rest6_1\Model\AccessRule[]',
        'assigned_to' => 'string',
        'channel' => '\iNew\Rest6_1\Model\Channel',
        'key' => 'string',
        'parameter_restrictions' => '\iNew\Rest6_1\Model\ParameterRestriction[]',
        'properties' => 'map[string,string]',
        'provider_id' => 'int',
        'retailer_key' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'access_role' => 'accessRole',
        'access_rules' => 'accessRules',
        'assigned_to' => 'assignedTo',
        'channel' => 'channel',
        'key' => 'key',
        'parameter_restrictions' => 'parameterRestrictions',
        'properties' => 'properties',
        'provider_id' => 'providerId',
        'retailer_key' => 'retailerKey'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'access_role' => 'setAccessRole',
        'access_rules' => 'setAccessRules',
        'assigned_to' => 'setAssignedTo',
        'channel' => 'setChannel',
        'key' => 'setKey',
        'parameter_restrictions' => 'setParameterRestrictions',
        'properties' => 'setProperties',
        'provider_id' => 'setProviderId',
        'retailer_key' => 'setRetailerKey'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'access_role' => 'getAccessRole',
        'access_rules' => 'getAccessRules',
        'assigned_to' => 'getAssignedTo',
        'channel' => 'getChannel',
        'key' => 'getKey',
        'parameter_restrictions' => 'getParameterRestrictions',
        'properties' => 'getProperties',
        'provider_id' => 'getProviderId',
        'retailer_key' => 'getRetailerKey'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_role'] = isset($data['access_role']) ? $data['access_role'] : null;
        $this->container['access_rules'] = isset($data['access_rules']) ? $data['access_rules'] : null;
        $this->container['assigned_to'] = isset($data['assigned_to']) ? $data['assigned_to'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['parameter_restrictions'] = isset($data['parameter_restrictions']) ? $data['parameter_restrictions'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['provider_id'] = isset($data['provider_id']) ? $data['provider_id'] : null;
        $this->container['retailer_key'] = isset($data['retailer_key']) ? $data['retailer_key'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['access_rules'] === null) {
            $invalid_properties[] = "'access_rules' can't be null";
        }
        if ($this->container['assigned_to'] === null) {
            $invalid_properties[] = "'assigned_to' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalid_properties[] = "'channel' can't be null";
        }
        if ($this->container['key'] === null) {
            $invalid_properties[] = "'key' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['access_rules'] === null) {
            return false;
        }
        if ($this->container['assigned_to'] === null) {
            return false;
        }
        if ($this->container['channel'] === null) {
            return false;
        }
        if ($this->container['key'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_role
     * @return \iNew\Rest6_1\Model\AccessRole
     */
    public function getAccessRole()
    {
        return $this->container['access_role'];
    }

    /**
     * Sets access_role
     * @param \iNew\Rest6_1\Model\AccessRole $access_role
     * @return $this
     */
    public function setAccessRole($access_role)
    {
        $this->container['access_role'] = $access_role;

        return $this;
    }

    /**
     * Gets access_rules
     * @return \iNew\Rest6_1\Model\AccessRule[]
     */
    public function getAccessRules()
    {
        return $this->container['access_rules'];
    }

    /**
     * Sets access_rules
     * @param \iNew\Rest6_1\Model\AccessRule[] $access_rules the access rules of this key<br> if any single AccessRule is violated then the AccessKey has no permission to access the operation and ACCESS_DENIED will be returned
     * @return $this
     */
    public function setAccessRules($access_rules)
    {
        $this->container['access_rules'] = $access_rules;

        return $this;
    }

    /**
     * Gets assigned_to
     * @return string
     */
    public function getAssignedTo()
    {
        return $this->container['assigned_to'];
    }

    /**
     * Sets assigned_to
     * @param string $assigned_to a String a descriptive identifier so operations can keep track of who actually is using this key e.g. \"Lemon42 CRM\"
     * @return $this
     */
    public function setAssignedTo($assigned_to)
    {
        $this->container['assigned_to'] = $assigned_to;

        return $this;
    }

    /**
     * Gets channel
     * @return \iNew\Rest6_1\Model\Channel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     * @param \iNew\Rest6_1\Model\Channel $channel the Channel that will be set as a parameter for operations invoked with this key
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets key
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     * @param string $key the String to use as the id of the AccessKey
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets parameter_restrictions
     * @return \iNew\Rest6_1\Model\ParameterRestriction[]
     */
    public function getParameterRestrictions()
    {
        return $this->container['parameter_restrictions'];
    }

    /**
     * Sets parameter_restrictions
     * @param \iNew\Rest6_1\Model\ParameterRestriction[] $parameter_restrictions list of ParameterRestriction objects for granting access to rest operation parameters
     * @return $this
     */
    public function setParameterRestrictions($parameter_restrictions)
    {
        $this->container['parameter_restrictions'] = $parameter_restrictions;

        return $this;
    }

    /**
     * Gets properties
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     * @param map[string,string] $properties a map which stores additional values (like retailerId)
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets provider_id
     * @return int
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     * @param int $provider_id the MVNO provider id that will be set as a parameter for operations invoked with this key<br> a <code>null</code> value is allowed and the AccessKey will be interpreted as an MVNA key which can only be used to maintain AccessKeys if the access rules do not restrict this
     * @return $this
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets retailer_key
     * @return bool
     */
    public function getRetailerKey()
    {
        return $this->container['retailer_key'];
    }

    /**
     * Sets retailer_key
     * @param bool $retailer_key
     * @return $this
     */
    public function setRetailerKey($retailer_key)
    {
        $this->container['retailer_key'] = $retailer_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


