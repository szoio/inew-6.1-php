<?php
/**
 * ProviderType
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * ProviderType Class Doc Comment
 *
 * @category    Class
 * @description TODO write javadoc &lt;p&gt; User: michael Date: Aug 6, 2009 Time: 10:52:09 AM &lt;/p&gt;
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProviderType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProviderType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
        'country_prefix' => '\iNew\Rest6_1\Model\NumberingInfoType',
        'id' => 'int',
        'international_prefixes' => '\iNew\Rest6_1\Model\NumberingInfoType[]',
        'key' => 'string',
        'locale' => 'string',
        'name' => 'string',
        'national_prefixes' => '\iNew\Rest6_1\Model\NumberingInfoType[]',
        'nop_id' => 'int',
        'nop_name' => 'string',
        'time_zone' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'country_prefix' => 'countryPrefix',
        'id' => 'id',
        'international_prefixes' => 'internationalPrefixes',
        'key' => 'key',
        'locale' => 'locale',
        'name' => 'name',
        'national_prefixes' => 'nationalPrefixes',
        'nop_id' => 'nopId',
        'nop_name' => 'nopName',
        'time_zone' => 'timeZone'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'country_prefix' => 'setCountryPrefix',
        'id' => 'setId',
        'international_prefixes' => 'setInternationalPrefixes',
        'key' => 'setKey',
        'locale' => 'setLocale',
        'name' => 'setName',
        'national_prefixes' => 'setNationalPrefixes',
        'nop_id' => 'setNopId',
        'nop_name' => 'setNopName',
        'time_zone' => 'setTimeZone'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'country_prefix' => 'getCountryPrefix',
        'id' => 'getId',
        'international_prefixes' => 'getInternationalPrefixes',
        'key' => 'getKey',
        'locale' => 'getLocale',
        'name' => 'getName',
        'national_prefixes' => 'getNationalPrefixes',
        'nop_id' => 'getNopId',
        'nop_name' => 'getNopName',
        'time_zone' => 'getTimeZone'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['country_prefix'] = isset($data['country_prefix']) ? $data['country_prefix'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['international_prefixes'] = isset($data['international_prefixes']) ? $data['international_prefixes'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['national_prefixes'] = isset($data['national_prefixes']) ? $data['national_prefixes'] : null;
        $this->container['nop_id'] = isset($data['nop_id']) ? $data['nop_id'] : null;
        $this->container['nop_name'] = isset($data['nop_name']) ? $data['nop_name'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['country'] === null) {
            $invalid_properties[] = "'country' can't be null";
        }
        if ($this->container['country_prefix'] === null) {
            $invalid_properties[] = "'country_prefix' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['international_prefixes'] === null) {
            $invalid_properties[] = "'international_prefixes' can't be null";
        }
        if ($this->container['key'] === null) {
            $invalid_properties[] = "'key' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalid_properties[] = "'locale' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['national_prefixes'] === null) {
            $invalid_properties[] = "'national_prefixes' can't be null";
        }
        if ($this->container['nop_id'] === null) {
            $invalid_properties[] = "'nop_id' can't be null";
        }
        if ($this->container['nop_name'] === null) {
            $invalid_properties[] = "'nop_name' can't be null";
        }
        if ($this->container['time_zone'] === null) {
            $invalid_properties[] = "'time_zone' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['country'] === null) {
            return false;
        }
        if ($this->container['country_prefix'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['international_prefixes'] === null) {
            return false;
        }
        if ($this->container['key'] === null) {
            return false;
        }
        if ($this->container['locale'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['national_prefixes'] === null) {
            return false;
        }
        if ($this->container['nop_id'] === null) {
            return false;
        }
        if ($this->container['nop_name'] === null) {
            return false;
        }
        if ($this->container['time_zone'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country a provider's (MVNO) country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_prefix
     * @return \iNew\Rest6_1\Model\NumberingInfoType
     */
    public function getCountryPrefix()
    {
        return $this->container['country_prefix'];
    }

    /**
     * Sets country_prefix
     * @param \iNew\Rest6_1\Model\NumberingInfoType $country_prefix a provider's (MVNO) country MSISDN prefix
     * @return $this
     */
    public function setCountryPrefix($country_prefix)
    {
        $this->container['country_prefix'] = $country_prefix;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id a provider's (MVNO) unique id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets international_prefixes
     * @return \iNew\Rest6_1\Model\NumberingInfoType[]
     */
    public function getInternationalPrefixes()
    {
        return $this->container['international_prefixes'];
    }

    /**
     * Sets international_prefixes
     * @param \iNew\Rest6_1\Model\NumberingInfoType[] $international_prefixes a provider's (MVNO) international MSISDN prefix list
     * @return $this
     */
    public function setInternationalPrefixes($international_prefixes)
    {
        $this->container['international_prefixes'] = $international_prefixes;

        return $this;
    }

    /**
     * Gets key
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     * @param string $key a provider's (MVNO) key consisting of network operator name and provider's name
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets locale
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     * @param string $locale a provider's (MVNO) locale
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name a provider's (MVNO) name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets national_prefixes
     * @return \iNew\Rest6_1\Model\NumberingInfoType[]
     */
    public function getNationalPrefixes()
    {
        return $this->container['national_prefixes'];
    }

    /**
     * Sets national_prefixes
     * @param \iNew\Rest6_1\Model\NumberingInfoType[] $national_prefixes a provider's (MVNO) national MSISDN prefix list
     * @return $this
     */
    public function setNationalPrefixes($national_prefixes)
    {
        $this->container['national_prefixes'] = $national_prefixes;

        return $this;
    }

    /**
     * Gets nop_id
     * @return int
     */
    public function getNopId()
    {
        return $this->container['nop_id'];
    }

    /**
     * Sets nop_id
     * @param int $nop_id a provider's (MVNO) network operator id
     * @return $this
     */
    public function setNopId($nop_id)
    {
        $this->container['nop_id'] = $nop_id;

        return $this;
    }

    /**
     * Gets nop_name
     * @return string
     */
    public function getNopName()
    {
        return $this->container['nop_name'];
    }

    /**
     * Sets nop_name
     * @param string $nop_name a provider's (MVNO) network operator name
     * @return $this
     */
    public function setNopName($nop_name)
    {
        $this->container['nop_name'] = $nop_name;

        return $this;
    }

    /**
     * Gets time_zone
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     * @param string $time_zone a provider's (MVNO) timezone
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


