<?php
/**
 * SubscriptionDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * SubscriptionDetails Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionDetails extends AbstractDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_state' => '\iNew\Rest6_1\Model\SubscriptionState',
        'current_tariff_id' => 'int',
        'current_type' => '\iNew\Rest6_1\Model\SubscriptionType',
        'previous_state' => '\iNew\Rest6_1\Model\SubscriptionState',
        'previous_tariff_id' => 'int',
        'previous_type' => '\iNew\Rest6_1\Model\SubscriptionType',
        'subscriber_activation_date' => '\DateTime',
        'subscriber_expiry_date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'current_state' => 'currentState',
        'current_tariff_id' => 'currentTariffId',
        'current_type' => 'currentType',
        'previous_state' => 'previousState',
        'previous_tariff_id' => 'previousTariffId',
        'previous_type' => 'previousType',
        'subscriber_activation_date' => 'subscriberActivationDate',
        'subscriber_expiry_date' => 'subscriberExpiryDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'current_state' => 'setCurrentState',
        'current_tariff_id' => 'setCurrentTariffId',
        'current_type' => 'setCurrentType',
        'previous_state' => 'setPreviousState',
        'previous_tariff_id' => 'setPreviousTariffId',
        'previous_type' => 'setPreviousType',
        'subscriber_activation_date' => 'setSubscriberActivationDate',
        'subscriber_expiry_date' => 'setSubscriberExpiryDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'current_state' => 'getCurrentState',
        'current_tariff_id' => 'getCurrentTariffId',
        'current_type' => 'getCurrentType',
        'previous_state' => 'getPreviousState',
        'previous_tariff_id' => 'getPreviousTariffId',
        'previous_type' => 'getPreviousType',
        'subscriber_activation_date' => 'getSubscriberActivationDate',
        'subscriber_expiry_date' => 'getSubscriberExpiryDate'
    ];

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['current_state'] = isset($data['current_state']) ? $data['current_state'] : null;
        $this->container['current_tariff_id'] = isset($data['current_tariff_id']) ? $data['current_tariff_id'] : null;
        $this->container['current_type'] = isset($data['current_type']) ? $data['current_type'] : null;
        $this->container['previous_state'] = isset($data['previous_state']) ? $data['previous_state'] : null;
        $this->container['previous_tariff_id'] = isset($data['previous_tariff_id']) ? $data['previous_tariff_id'] : null;
        $this->container['previous_type'] = isset($data['previous_type']) ? $data['previous_type'] : null;
        $this->container['subscriber_activation_date'] = isset($data['subscriber_activation_date']) ? $data['subscriber_activation_date'] : null;
        $this->container['subscriber_expiry_date'] = isset($data['subscriber_expiry_date']) ? $data['subscriber_expiry_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = parent::listInvalidProperties();

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets current_state
     * @return \iNew\Rest6_1\Model\SubscriptionState
     */
    public function getCurrentState()
    {
        return $this->container['current_state'];
    }

    /**
     * Sets current_state
     * @param \iNew\Rest6_1\Model\SubscriptionState $current_state the current stat
     * @return $this
     */
    public function setCurrentState($current_state)
    {
        $this->container['current_state'] = $current_state;

        return $this;
    }

    /**
     * Gets current_tariff_id
     * @return int
     */
    public function getCurrentTariffId()
    {
        return $this->container['current_tariff_id'];
    }

    /**
     * Sets current_tariff_id
     * @param int $current_tariff_id current tariffId
     * @return $this
     */
    public function setCurrentTariffId($current_tariff_id)
    {
        $this->container['current_tariff_id'] = $current_tariff_id;

        return $this;
    }

    /**
     * Gets current_type
     * @return \iNew\Rest6_1\Model\SubscriptionType
     */
    public function getCurrentType()
    {
        return $this->container['current_type'];
    }

    /**
     * Sets current_type
     * @param \iNew\Rest6_1\Model\SubscriptionType $current_type the current type
     * @return $this
     */
    public function setCurrentType($current_type)
    {
        $this->container['current_type'] = $current_type;

        return $this;
    }

    /**
     * Gets previous_state
     * @return \iNew\Rest6_1\Model\SubscriptionState
     */
    public function getPreviousState()
    {
        return $this->container['previous_state'];
    }

    /**
     * Sets previous_state
     * @param \iNew\Rest6_1\Model\SubscriptionState $previous_state the previous state
     * @return $this
     */
    public function setPreviousState($previous_state)
    {
        $this->container['previous_state'] = $previous_state;

        return $this;
    }

    /**
     * Gets previous_tariff_id
     * @return int
     */
    public function getPreviousTariffId()
    {
        return $this->container['previous_tariff_id'];
    }

    /**
     * Sets previous_tariff_id
     * @param int $previous_tariff_id previous tariffId
     * @return $this
     */
    public function setPreviousTariffId($previous_tariff_id)
    {
        $this->container['previous_tariff_id'] = $previous_tariff_id;

        return $this;
    }

    /**
     * Gets previous_type
     * @return \iNew\Rest6_1\Model\SubscriptionType
     */
    public function getPreviousType()
    {
        return $this->container['previous_type'];
    }

    /**
     * Sets previous_type
     * @param \iNew\Rest6_1\Model\SubscriptionType $previous_type the previous type
     * @return $this
     */
    public function setPreviousType($previous_type)
    {
        $this->container['previous_type'] = $previous_type;

        return $this;
    }

    /**
     * Gets subscriber_activation_date
     * @return \DateTime
     */
    public function getSubscriberActivationDate()
    {
        return $this->container['subscriber_activation_date'];
    }

    /**
     * Sets subscriber_activation_date
     * @param \DateTime $subscriber_activation_date the activation date
     * @return $this
     */
    public function setSubscriberActivationDate($subscriber_activation_date)
    {
        $this->container['subscriber_activation_date'] = $subscriber_activation_date;

        return $this;
    }

    /**
     * Gets subscriber_expiry_date
     * @return \DateTime
     */
    public function getSubscriberExpiryDate()
    {
        return $this->container['subscriber_expiry_date'];
    }

    /**
     * Sets subscriber_expiry_date
     * @param \DateTime $subscriber_expiry_date the expiry date
     * @return $this
     */
    public function setSubscriberExpiryDate($subscriber_expiry_date)
    {
        $this->container['subscriber_expiry_date'] = $subscriber_expiry_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


