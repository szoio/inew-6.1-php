<?php
/**
 * EventChargingParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * EventChargingParameters Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EventChargingParameters implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EventChargingParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'called_party' => 'string',
        'calling_party' => 'string',
        'charging_trigger' => '\iNew\Rest6_1\Model\ChargingTrigger',
        'location' => 'string',
        'message_type' => '\iNew\Rest6_1\Model\EventMessageType',
        'number_of_segments' => 'int',
        'reference_number' => 'string',
        'roaming' => 'bool',
        'session_begin_time_stamp' => '\DateTime',
        'session_id' => 'string',
        'size' => 'int',
        'start_time' => '\DateTime',
        'suppress_number' => 'bool',
        'traffic_type' => '\iNew\Rest6_1\Model\EventTrafficType'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'called_party' => 'calledParty',
        'calling_party' => 'callingParty',
        'charging_trigger' => 'chargingTrigger',
        'location' => 'location',
        'message_type' => 'messageType',
        'number_of_segments' => 'numberOfSegments',
        'reference_number' => 'referenceNumber',
        'roaming' => 'roaming',
        'session_begin_time_stamp' => 'sessionBeginTimeStamp',
        'session_id' => 'sessionId',
        'size' => 'size',
        'start_time' => 'startTime',
        'suppress_number' => 'suppressNumber',
        'traffic_type' => 'trafficType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'called_party' => 'setCalledParty',
        'calling_party' => 'setCallingParty',
        'charging_trigger' => 'setChargingTrigger',
        'location' => 'setLocation',
        'message_type' => 'setMessageType',
        'number_of_segments' => 'setNumberOfSegments',
        'reference_number' => 'setReferenceNumber',
        'roaming' => 'setRoaming',
        'session_begin_time_stamp' => 'setSessionBeginTimeStamp',
        'session_id' => 'setSessionId',
        'size' => 'setSize',
        'start_time' => 'setStartTime',
        'suppress_number' => 'setSuppressNumber',
        'traffic_type' => 'setTrafficType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'called_party' => 'getCalledParty',
        'calling_party' => 'getCallingParty',
        'charging_trigger' => 'getChargingTrigger',
        'location' => 'getLocation',
        'message_type' => 'getMessageType',
        'number_of_segments' => 'getNumberOfSegments',
        'reference_number' => 'getReferenceNumber',
        'roaming' => 'getRoaming',
        'session_begin_time_stamp' => 'getSessionBeginTimeStamp',
        'session_id' => 'getSessionId',
        'size' => 'getSize',
        'start_time' => 'getStartTime',
        'suppress_number' => 'getSuppressNumber',
        'traffic_type' => 'getTrafficType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['called_party'] = isset($data['called_party']) ? $data['called_party'] : null;
        $this->container['calling_party'] = isset($data['calling_party']) ? $data['calling_party'] : null;
        $this->container['charging_trigger'] = isset($data['charging_trigger']) ? $data['charging_trigger'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['number_of_segments'] = isset($data['number_of_segments']) ? $data['number_of_segments'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['roaming'] = isset($data['roaming']) ? $data['roaming'] : null;
        $this->container['session_begin_time_stamp'] = isset($data['session_begin_time_stamp']) ? $data['session_begin_time_stamp'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['suppress_number'] = isset($data['suppress_number']) ? $data['suppress_number'] : null;
        $this->container['traffic_type'] = isset($data['traffic_type']) ? $data['traffic_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets called_party
     * @return string
     */
    public function getCalledParty()
    {
        return $this->container['called_party'];
    }

    /**
     * Sets called_party
     * @param string $called_party the calledParty
     * @return $this
     */
    public function setCalledParty($called_party)
    {
        $this->container['called_party'] = $called_party;

        return $this;
    }

    /**
     * Gets calling_party
     * @return string
     */
    public function getCallingParty()
    {
        return $this->container['calling_party'];
    }

    /**
     * Sets calling_party
     * @param string $calling_party the callingParty
     * @return $this
     */
    public function setCallingParty($calling_party)
    {
        $this->container['calling_party'] = $calling_party;

        return $this;
    }

    /**
     * Gets charging_trigger
     * @return \iNew\Rest6_1\Model\ChargingTrigger
     */
    public function getChargingTrigger()
    {
        return $this->container['charging_trigger'];
    }

    /**
     * Sets charging_trigger
     * @param \iNew\Rest6_1\Model\ChargingTrigger $charging_trigger the chargingTrigger
     * @return $this
     */
    public function setChargingTrigger($charging_trigger)
    {
        $this->container['charging_trigger'] = $charging_trigger;

        return $this;
    }

    /**
     * Gets location
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param string $location the location
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets message_type
     * @return \iNew\Rest6_1\Model\EventMessageType
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     * @param \iNew\Rest6_1\Model\EventMessageType $message_type the messageType
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets number_of_segments
     * @return int
     */
    public function getNumberOfSegments()
    {
        return $this->container['number_of_segments'];
    }

    /**
     * Sets number_of_segments
     * @param int $number_of_segments the numberOfSegments
     * @return $this
     */
    public function setNumberOfSegments($number_of_segments)
    {
        $this->container['number_of_segments'] = $number_of_segments;

        return $this;
    }

    /**
     * Gets reference_number
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     * @param string $reference_number the referenceNumber
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets roaming
     * @return bool
     */
    public function getRoaming()
    {
        return $this->container['roaming'];
    }

    /**
     * Sets roaming
     * @param bool $roaming the roaming
     * @return $this
     */
    public function setRoaming($roaming)
    {
        $this->container['roaming'] = $roaming;

        return $this;
    }

    /**
     * Gets session_begin_time_stamp
     * @return \DateTime
     */
    public function getSessionBeginTimeStamp()
    {
        return $this->container['session_begin_time_stamp'];
    }

    /**
     * Sets session_begin_time_stamp
     * @param \DateTime $session_begin_time_stamp the sessionBeginTimeStamp
     * @return $this
     */
    public function setSessionBeginTimeStamp($session_begin_time_stamp)
    {
        $this->container['session_begin_time_stamp'] = $session_begin_time_stamp;

        return $this;
    }

    /**
     * Gets session_id
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     * @param string $session_id the sessionId
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param int $size the size
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets start_time
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param \DateTime $start_time the startTime
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets suppress_number
     * @return bool
     */
    public function getSuppressNumber()
    {
        return $this->container['suppress_number'];
    }

    /**
     * Sets suppress_number
     * @param bool $suppress_number the suppressNumber
     * @return $this
     */
    public function setSuppressNumber($suppress_number)
    {
        $this->container['suppress_number'] = $suppress_number;

        return $this;
    }

    /**
     * Gets traffic_type
     * @return \iNew\Rest6_1\Model\EventTrafficType
     */
    public function getTrafficType()
    {
        return $this->container['traffic_type'];
    }

    /**
     * Sets traffic_type
     * @param \iNew\Rest6_1\Model\EventTrafficType $traffic_type the trafficType
     * @return $this
     */
    public function setTrafficType($traffic_type)
    {
        $this->container['traffic_type'] = $traffic_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


