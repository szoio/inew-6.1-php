<?php
/**
 * BundleType1
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * BundleType1 Class Doc Comment
 *
 * @category    Class
 * @description General information about a bundle, containing its name, short description and payment details. Bundle code is a short numeric identification of a bundle
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BundleType1 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BundleType1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bundle_code' => 'string',
        'category' => '\iNew\Rest6_1\Model\Category',
        'charged_upfront' => 'bool',
        'description' => 'string',
        'expires' => 'int',
        'expiry_unit' => '\iNew\Rest6_1\Model\ExpiryUnit',
        'group' => '\iNew\Rest6_1\Model\GroupType',
        'included_quota' => '\iNew\Rest6_1\Model\QuotaType[]',
        'initial_charges' => '\iNew\Rest6_1\Model\Charge[]',
        'name' => 'string',
        'number_of_renewals' => 'int',
        'payment_option' => '\iNew\Rest6_1\Model\PaymentOption',
        'periodic' => 'bool',
        'periodic_charges' => '\iNew\Rest6_1\Model\Charge[]',
        'type' => '\iNew\Rest6_1\Model\Type',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bundle_code' => 'bundleCode',
        'category' => 'category',
        'charged_upfront' => 'chargedUpfront',
        'description' => 'description',
        'expires' => 'expires',
        'expiry_unit' => 'expiryUnit',
        'group' => 'group',
        'included_quota' => 'includedQuota',
        'initial_charges' => 'initialCharges',
        'name' => 'name',
        'number_of_renewals' => 'numberOfRenewals',
        'payment_option' => 'paymentOption',
        'periodic' => 'periodic',
        'periodic_charges' => 'periodicCharges',
        'type' => 'type',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bundle_code' => 'setBundleCode',
        'category' => 'setCategory',
        'charged_upfront' => 'setChargedUpfront',
        'description' => 'setDescription',
        'expires' => 'setExpires',
        'expiry_unit' => 'setExpiryUnit',
        'group' => 'setGroup',
        'included_quota' => 'setIncludedQuota',
        'initial_charges' => 'setInitialCharges',
        'name' => 'setName',
        'number_of_renewals' => 'setNumberOfRenewals',
        'payment_option' => 'setPaymentOption',
        'periodic' => 'setPeriodic',
        'periodic_charges' => 'setPeriodicCharges',
        'type' => 'setType',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bundle_code' => 'getBundleCode',
        'category' => 'getCategory',
        'charged_upfront' => 'getChargedUpfront',
        'description' => 'getDescription',
        'expires' => 'getExpires',
        'expiry_unit' => 'getExpiryUnit',
        'group' => 'getGroup',
        'included_quota' => 'getIncludedQuota',
        'initial_charges' => 'getInitialCharges',
        'name' => 'getName',
        'number_of_renewals' => 'getNumberOfRenewals',
        'payment_option' => 'getPaymentOption',
        'periodic' => 'getPeriodic',
        'periodic_charges' => 'getPeriodicCharges',
        'type' => 'getType',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bundle_code'] = isset($data['bundle_code']) ? $data['bundle_code'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['charged_upfront'] = isset($data['charged_upfront']) ? $data['charged_upfront'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expires'] = isset($data['expires']) ? $data['expires'] : null;
        $this->container['expiry_unit'] = isset($data['expiry_unit']) ? $data['expiry_unit'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['included_quota'] = isset($data['included_quota']) ? $data['included_quota'] : null;
        $this->container['initial_charges'] = isset($data['initial_charges']) ? $data['initial_charges'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_renewals'] = isset($data['number_of_renewals']) ? $data['number_of_renewals'] : null;
        $this->container['payment_option'] = isset($data['payment_option']) ? $data['payment_option'] : null;
        $this->container['periodic'] = isset($data['periodic']) ? $data['periodic'] : null;
        $this->container['periodic_charges'] = isset($data['periodic_charges']) ? $data['periodic_charges'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['bundle_code'] === null) {
            $invalid_properties[] = "'bundle_code' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        if ($this->container['charged_upfront'] === null) {
            $invalid_properties[] = "'charged_upfront' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalid_properties[] = "'group' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['payment_option'] === null) {
            $invalid_properties[] = "'payment_option' can't be null";
        }
        if ($this->container['periodic'] === null) {
            $invalid_properties[] = "'periodic' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['bundle_code'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        if ($this->container['charged_upfront'] === null) {
            return false;
        }
        if ($this->container['group'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['payment_option'] === null) {
            return false;
        }
        if ($this->container['periodic'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bundle_code
     * @return string
     */
    public function getBundleCode()
    {
        return $this->container['bundle_code'];
    }

    /**
     * Sets bundle_code
     * @param string $bundle_code
     * @return $this
     */
    public function setBundleCode($bundle_code)
    {
        $this->container['bundle_code'] = $bundle_code;

        return $this;
    }

    /**
     * Gets category
     * @return \iNew\Rest6_1\Model\Category
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param \iNew\Rest6_1\Model\Category $category
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets charged_upfront
     * @return bool
     */
    public function getChargedUpfront()
    {
        return $this->container['charged_upfront'];
    }

    /**
     * Sets charged_upfront
     * @param bool $charged_upfront
     * @return $this
     */
    public function setChargedUpfront($charged_upfront)
    {
        $this->container['charged_upfront'] = $charged_upfront;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expires
     * @return int
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     * @param int $expires
     * @return $this
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets expiry_unit
     * @return \iNew\Rest6_1\Model\ExpiryUnit
     */
    public function getExpiryUnit()
    {
        return $this->container['expiry_unit'];
    }

    /**
     * Sets expiry_unit
     * @param \iNew\Rest6_1\Model\ExpiryUnit $expiry_unit
     * @return $this
     */
    public function setExpiryUnit($expiry_unit)
    {
        $this->container['expiry_unit'] = $expiry_unit;

        return $this;
    }

    /**
     * Gets group
     * @return \iNew\Rest6_1\Model\GroupType
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     * @param \iNew\Rest6_1\Model\GroupType $group
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets included_quota
     * @return \iNew\Rest6_1\Model\QuotaType[]
     */
    public function getIncludedQuota()
    {
        return $this->container['included_quota'];
    }

    /**
     * Sets included_quota
     * @param \iNew\Rest6_1\Model\QuotaType[] $included_quota
     * @return $this
     */
    public function setIncludedQuota($included_quota)
    {
        $this->container['included_quota'] = $included_quota;

        return $this;
    }

    /**
     * Gets initial_charges
     * @return \iNew\Rest6_1\Model\Charge[]
     */
    public function getInitialCharges()
    {
        return $this->container['initial_charges'];
    }

    /**
     * Sets initial_charges
     * @param \iNew\Rest6_1\Model\Charge[] $initial_charges the charges that will be tried to be charged on the bundle purchase
     * @return $this
     */
    public function setInitialCharges($initial_charges)
    {
        $this->container['initial_charges'] = $initial_charges;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_renewals
     * @return int
     */
    public function getNumberOfRenewals()
    {
        return $this->container['number_of_renewals'];
    }

    /**
     * Sets number_of_renewals
     * @param int $number_of_renewals
     * @return $this
     */
    public function setNumberOfRenewals($number_of_renewals)
    {
        $this->container['number_of_renewals'] = $number_of_renewals;

        return $this;
    }

    /**
     * Gets payment_option
     * @return \iNew\Rest6_1\Model\PaymentOption
     */
    public function getPaymentOption()
    {
        return $this->container['payment_option'];
    }

    /**
     * Sets payment_option
     * @param \iNew\Rest6_1\Model\PaymentOption $payment_option if ALL this plan can be activated with either the online payment profile, or with the main balance
     * @return $this
     */
    public function setPaymentOption($payment_option)
    {
        $this->container['payment_option'] = $payment_option;

        return $this;
    }

    /**
     * Gets periodic
     * @return bool
     */
    public function getPeriodic()
    {
        return $this->container['periodic'];
    }

    /**
     * Sets periodic
     * @param bool $periodic
     * @return $this
     */
    public function setPeriodic($periodic)
    {
        $this->container['periodic'] = $periodic;

        return $this;
    }

    /**
     * Gets periodic_charges
     * @return \iNew\Rest6_1\Model\Charge[]
     */
    public function getPeriodicCharges()
    {
        return $this->container['periodic_charges'];
    }

    /**
     * Sets periodic_charges
     * @param \iNew\Rest6_1\Model\Charge[] $periodic_charges the list of charges that will be tried to be charged on the bundle renewal. This list is empty, if the bundle is not periodic
     * @return $this
     */
    public function setPeriodicCharges($periodic_charges)
    {
        $this->container['periodic_charges'] = $periodic_charges;

        return $this;
    }

    /**
     * Gets type
     * @return \iNew\Rest6_1\Model\Type
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \iNew\Rest6_1\Model\Type $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets valid_from
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     * @param \DateTime $valid_from
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     * @param \DateTime $valid_to
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


