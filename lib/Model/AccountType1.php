<?php
/**
 * AccountType1
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * AccountType1 Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccountType1 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AccountType1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'account_reference_id' => 'int',
        'active' => 'bool',
        'active_from' => '\DateTime',
        'balance' => 'int',
        'category' => '\iNew\Rest6_1\Model\AccountCategory',
        'currency_id' => 'int',
        'expiry_date' => '\DateTime',
        'initial_balance' => 'int',
        'name' => 'string',
        'reserved_balance' => 'int',
        'shared' => 'bool',
        'type' => '\iNew\Rest6_1\Model\AccountType',
        'unit' => '\iNew\Rest6_1\Model\CurrencyUnitType',
        'unit_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'account_reference_id' => 'accountReferenceId',
        'active' => 'active',
        'active_from' => 'activeFrom',
        'balance' => 'balance',
        'category' => 'category',
        'currency_id' => 'currencyId',
        'expiry_date' => 'expiryDate',
        'initial_balance' => 'initialBalance',
        'name' => 'name',
        'reserved_balance' => 'reservedBalance',
        'shared' => 'shared',
        'type' => 'type',
        'unit' => 'unit',
        'unit_id' => 'unitId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_reference_id' => 'setAccountReferenceId',
        'active' => 'setActive',
        'active_from' => 'setActiveFrom',
        'balance' => 'setBalance',
        'category' => 'setCategory',
        'currency_id' => 'setCurrencyId',
        'expiry_date' => 'setExpiryDate',
        'initial_balance' => 'setInitialBalance',
        'name' => 'setName',
        'reserved_balance' => 'setReservedBalance',
        'shared' => 'setShared',
        'type' => 'setType',
        'unit' => 'setUnit',
        'unit_id' => 'setUnitId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_reference_id' => 'getAccountReferenceId',
        'active' => 'getActive',
        'active_from' => 'getActiveFrom',
        'balance' => 'getBalance',
        'category' => 'getCategory',
        'currency_id' => 'getCurrencyId',
        'expiry_date' => 'getExpiryDate',
        'initial_balance' => 'getInitialBalance',
        'name' => 'getName',
        'reserved_balance' => 'getReservedBalance',
        'shared' => 'getShared',
        'type' => 'getType',
        'unit' => 'getUnit',
        'unit_id' => 'getUnitId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_reference_id'] = isset($data['account_reference_id']) ? $data['account_reference_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['active_from'] = isset($data['active_from']) ? $data['active_from'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['initial_balance'] = isset($data['initial_balance']) ? $data['initial_balance'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reserved_balance'] = isset($data['reserved_balance']) ? $data['reserved_balance'] : null;
        $this->container['shared'] = isset($data['shared']) ? $data['shared'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['account_id'] === null) {
            $invalid_properties[] = "'account_id' can't be null";
        }
        if ($this->container['account_reference_id'] === null) {
            $invalid_properties[] = "'account_reference_id' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalid_properties[] = "'active' can't be null";
        }
        if ($this->container['active_from'] === null) {
            $invalid_properties[] = "'active_from' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalid_properties[] = "'balance' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalid_properties[] = "'currency_id' can't be null";
        }
        if ($this->container['expiry_date'] === null) {
            $invalid_properties[] = "'expiry_date' can't be null";
        }
        if ($this->container['initial_balance'] === null) {
            $invalid_properties[] = "'initial_balance' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['reserved_balance'] === null) {
            $invalid_properties[] = "'reserved_balance' can't be null";
        }
        if ($this->container['shared'] === null) {
            $invalid_properties[] = "'shared' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalid_properties[] = "'unit' can't be null";
        }
        if ($this->container['unit_id'] === null) {
            $invalid_properties[] = "'unit_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['account_id'] === null) {
            return false;
        }
        if ($this->container['account_reference_id'] === null) {
            return false;
        }
        if ($this->container['active'] === null) {
            return false;
        }
        if ($this->container['active_from'] === null) {
            return false;
        }
        if ($this->container['balance'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        if ($this->container['currency_id'] === null) {
            return false;
        }
        if ($this->container['expiry_date'] === null) {
            return false;
        }
        if ($this->container['initial_balance'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['reserved_balance'] === null) {
            return false;
        }
        if ($this->container['shared'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['unit'] === null) {
            return false;
        }
        if ($this->container['unit_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets account_id
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param int $account_id A Subscriber's Account identifier
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_reference_id
     * @return int
     */
    public function getAccountReferenceId()
    {
        return $this->container['account_reference_id'];
    }

    /**
     * Sets account_reference_id
     * @param int $account_reference_id the accountReferenceId
     * @return $this
     */
    public function setAccountReferenceId($account_reference_id)
    {
        $this->container['account_reference_id'] = $account_reference_id;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active A Subscriber's active status (TRUE or FALSE)
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets active_from
     * @return \DateTime
     */
    public function getActiveFrom()
    {
        return $this->container['active_from'];
    }

    /**
     * Sets active_from
     * @param \DateTime $active_from A Subscriber's Account activation date
     * @return $this
     */
    public function setActiveFrom($active_from)
    {
        $this->container['active_from'] = $active_from;

        return $this;
    }

    /**
     * Gets balance
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param int $balance A Subscriber's Account balance amount
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets category
     * @return \iNew\Rest6_1\Model\AccountCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param \iNew\Rest6_1\Model\AccountCategory $category A Subscriber's account category type
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets currency_id
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     * @param int $currency_id A Subscriber's Account currency identifier
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets expiry_date
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     * @param \DateTime $expiry_date A Subscriber's Account expiration date
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets initial_balance
     * @return int
     */
    public function getInitialBalance()
    {
        return $this->container['initial_balance'];
    }

    /**
     * Sets initial_balance
     * @param int $initial_balance A Subscriber's Account initial balance amount
     * @return $this
     */
    public function setInitialBalance($initial_balance)
    {
        $this->container['initial_balance'] = $initial_balance;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name A Subscriber's Account name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reserved_balance
     * @return int
     */
    public function getReservedBalance()
    {
        return $this->container['reserved_balance'];
    }

    /**
     * Sets reserved_balance
     * @param int $reserved_balance A Subscriber's Account reserved balance amount
     * @return $this
     */
    public function setReservedBalance($reserved_balance)
    {
        $this->container['reserved_balance'] = $reserved_balance;

        return $this;
    }

    /**
     * Gets shared
     * @return bool
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     * @param bool $shared the shared
     * @return $this
     */
    public function setShared($shared)
    {
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets type
     * @return \iNew\Rest6_1\Model\AccountType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \iNew\Rest6_1\Model\AccountType $type A Subscriber's account type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit
     * @return \iNew\Rest6_1\Model\CurrencyUnitType
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     * @param \iNew\Rest6_1\Model\CurrencyUnitType $unit A Subscriber's Account currency unit
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets unit_id
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     * @param int $unit_id A Subscriber's Account currency unit identifier
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


