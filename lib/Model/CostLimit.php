<?php
/**
 * CostLimit
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * CostLimit Class Doc Comment
 *
 * @category    Class
 * @description Describes one limitation of cost control feature. Contains the limit in smallest units of main currency for specific traffic type and zone type. If this limit is reached by subscriber, he is not allowed to perform traffic in these zones
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CostLimit implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CostLimit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_units' => 'int',
        'traffic_type' => '\iNew\Rest6_1\Model\CostControlTrafficType',
        'zone_type' => '\iNew\Rest6_1\Model\CostControlZoneType'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'max_units' => 'maxUnits',
        'traffic_type' => 'trafficType',
        'zone_type' => 'zoneType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'max_units' => 'setMaxUnits',
        'traffic_type' => 'setTrafficType',
        'zone_type' => 'setZoneType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'max_units' => 'getMaxUnits',
        'traffic_type' => 'getTrafficType',
        'zone_type' => 'getZoneType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_units'] = isset($data['max_units']) ? $data['max_units'] : null;
        $this->container['traffic_type'] = isset($data['traffic_type']) ? $data['traffic_type'] : null;
        $this->container['zone_type'] = isset($data['zone_type']) ? $data['zone_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['max_units'] === null) {
            $invalid_properties[] = "'max_units' can't be null";
        }
        if ($this->container['traffic_type'] === null) {
            $invalid_properties[] = "'traffic_type' can't be null";
        }
        if ($this->container['zone_type'] === null) {
            $invalid_properties[] = "'zone_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['max_units'] === null) {
            return false;
        }
        if ($this->container['traffic_type'] === null) {
            return false;
        }
        if ($this->container['zone_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets max_units
     * @return int
     */
    public function getMaxUnits()
    {
        return $this->container['max_units'];
    }

    /**
     * Sets max_units
     * @param int $max_units Limit in smallest units of main currency which subscriber cannot exceed for the traffic and zone types
     * @return $this
     */
    public function setMaxUnits($max_units)
    {
        $this->container['max_units'] = $max_units;

        return $this;
    }

    /**
     * Gets traffic_type
     * @return \iNew\Rest6_1\Model\CostControlTrafficType
     */
    public function getTrafficType()
    {
        return $this->container['traffic_type'];
    }

    /**
     * Sets traffic_type
     * @param \iNew\Rest6_1\Model\CostControlTrafficType $traffic_type Traffic type for the cost control limitation
     * @return $this
     */
    public function setTrafficType($traffic_type)
    {
        $this->container['traffic_type'] = $traffic_type;

        return $this;
    }

    /**
     * Gets zone_type
     * @return \iNew\Rest6_1\Model\CostControlZoneType
     */
    public function getZoneType()
    {
        return $this->container['zone_type'];
    }

    /**
     * Sets zone_type
     * @param \iNew\Rest6_1\Model\CostControlZoneType $zone_type all available zone types for cost control limitation
     * @return $this
     */
    public function setZoneType($zone_type)
    {
        $this->container['zone_type'] = $zone_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


