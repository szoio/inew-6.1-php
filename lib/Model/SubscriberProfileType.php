<?php
/**
 * SubscriberProfileType
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * SubscriberProfileType Class Doc Comment
 *
 * @category    Class
 * @description &lt;p&gt; User: michael Date: Jul 20, 2009 Time: 2:30:11 PM &lt;/p&gt;
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriberProfileType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubscriberProfileType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activation_date' => '\DateTime',
        'customer_account_id' => 'string',
        'expiry_date' => '\DateTime',
        'external_id' => 'string',
        'iccid' => 'string',
        'id' => 'int',
        'imei' => 'string',
        'imsi' => 'string',
        'installation_date' => '\DateTime',
        'language' => 'string',
        'language_id' => 'int',
        'msisdn' => 'string',
        'sim_type' => '\iNew\Rest6_1\Model\SimType1',
        'state' => 'string',
        'type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_date' => 'activationDate',
        'customer_account_id' => 'customerAccountId',
        'expiry_date' => 'expiryDate',
        'external_id' => 'externalId',
        'iccid' => 'iccid',
        'id' => 'id',
        'imei' => 'imei',
        'imsi' => 'imsi',
        'installation_date' => 'installationDate',
        'language' => 'language',
        'language_id' => 'languageId',
        'msisdn' => 'msisdn',
        'sim_type' => 'simType',
        'state' => 'state',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activation_date' => 'setActivationDate',
        'customer_account_id' => 'setCustomerAccountId',
        'expiry_date' => 'setExpiryDate',
        'external_id' => 'setExternalId',
        'iccid' => 'setIccid',
        'id' => 'setId',
        'imei' => 'setImei',
        'imsi' => 'setImsi',
        'installation_date' => 'setInstallationDate',
        'language' => 'setLanguage',
        'language_id' => 'setLanguageId',
        'msisdn' => 'setMsisdn',
        'sim_type' => 'setSimType',
        'state' => 'setState',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activation_date' => 'getActivationDate',
        'customer_account_id' => 'getCustomerAccountId',
        'expiry_date' => 'getExpiryDate',
        'external_id' => 'getExternalId',
        'iccid' => 'getIccid',
        'id' => 'getId',
        'imei' => 'getImei',
        'imsi' => 'getImsi',
        'installation_date' => 'getInstallationDate',
        'language' => 'getLanguage',
        'language_id' => 'getLanguageId',
        'msisdn' => 'getMsisdn',
        'sim_type' => 'getSimType',
        'state' => 'getState',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['customer_account_id'] = isset($data['customer_account_id']) ? $data['customer_account_id'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['iccid'] = isset($data['iccid']) ? $data['iccid'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['imei'] = isset($data['imei']) ? $data['imei'] : null;
        $this->container['imsi'] = isset($data['imsi']) ? $data['imsi'] : null;
        $this->container['installation_date'] = isset($data['installation_date']) ? $data['installation_date'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['language_id'] = isset($data['language_id']) ? $data['language_id'] : null;
        $this->container['msisdn'] = isset($data['msisdn']) ? $data['msisdn'] : null;
        $this->container['sim_type'] = isset($data['sim_type']) ? $data['sim_type'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['customer_account_id'] === null) {
            $invalid_properties[] = "'customer_account_id' can't be null";
        }
        if ($this->container['iccid'] === null) {
            $invalid_properties[] = "'iccid' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['imsi'] === null) {
            $invalid_properties[] = "'imsi' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalid_properties[] = "'language' can't be null";
        }
        if ($this->container['language_id'] === null) {
            $invalid_properties[] = "'language_id' can't be null";
        }
        if ($this->container['msisdn'] === null) {
            $invalid_properties[] = "'msisdn' can't be null";
        }
        if ($this->container['sim_type'] === null) {
            $invalid_properties[] = "'sim_type' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalid_properties[] = "'state' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['customer_account_id'] === null) {
            return false;
        }
        if ($this->container['iccid'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['imsi'] === null) {
            return false;
        }
        if ($this->container['language'] === null) {
            return false;
        }
        if ($this->container['language_id'] === null) {
            return false;
        }
        if ($this->container['msisdn'] === null) {
            return false;
        }
        if ($this->container['sim_type'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets activation_date
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     * @param \DateTime $activation_date the activation date of the subscription
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets customer_account_id
     * @return string
     */
    public function getCustomerAccountId()
    {
        return $this->container['customer_account_id'];
    }

    /**
     * Sets customer_account_id
     * @param string $customer_account_id the customerAccountId owning this subscription
     * @return $this
     */
    public function setCustomerAccountId($customer_account_id)
    {
        $this->container['customer_account_id'] = $customer_account_id;

        return $this;
    }

    /**
     * Gets expiry_date
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     * @param \DateTime $expiry_date the expiry date of the subscritpion
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets external_id
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     * @param string $external_id the external ID stored with this subscription
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets iccid
     * @return string
     */
    public function getIccid()
    {
        return $this->container['iccid'];
    }

    /**
     * Sets iccid
     * @param string $iccid the ICCID identifying the SIM card
     * @return $this
     */
    public function setIccid($iccid)
    {
        $this->container['iccid'] = $iccid;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id the subscription ID to be used with all other methods
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imei
     * @return string
     */
    public function getImei()
    {
        return $this->container['imei'];
    }

    /**
     * Sets imei
     * @param string $imei the IMEI identifying the handset
     * @return $this
     */
    public function setImei($imei)
    {
        $this->container['imei'] = $imei;

        return $this;
    }

    /**
     * Gets imsi
     * @return string
     */
    public function getImsi()
    {
        return $this->container['imsi'];
    }

    /**
     * Sets imsi
     * @param string $imsi the IMSI
     * @return $this
     */
    public function setImsi($imsi)
    {
        $this->container['imsi'] = $imsi;

        return $this;
    }

    /**
     * Gets installation_date
     * @return \DateTime
     */
    public function getInstallationDate()
    {
        return $this->container['installation_date'];
    }

    /**
     * Sets installation_date
     * @param \DateTime $installation_date the installation date of the subscription
     * @return $this
     */
    public function setInstallationDate($installation_date)
    {
        $this->container['installation_date'] = $installation_date;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language the language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets language_id
     * @return int
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     * @param int $language_id the language ID
     * @return $this
     */
    public function setLanguageId($language_id)
    {
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets msisdn
     * @return string
     */
    public function getMsisdn()
    {
        return $this->container['msisdn'];
    }

    /**
     * Sets msisdn
     * @param string $msisdn
     * @return $this
     */
    public function setMsisdn($msisdn)
    {
        $this->container['msisdn'] = $msisdn;

        return $this;
    }

    /**
     * Gets sim_type
     * @return \iNew\Rest6_1\Model\SimType1
     */
    public function getSimType()
    {
        return $this->container['sim_type'];
    }

    /**
     * Sets sim_type
     * @param \iNew\Rest6_1\Model\SimType1 $sim_type the SIM type, either STANDARD or DATAONLY
     * @return $this
     */
    public function setSimType($sim_type)
    {
        $this->container['sim_type'] = $sim_type;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state the state of the subscription
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type the type of the subscription, either PREPAID or POSTPAID
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


