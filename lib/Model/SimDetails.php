<?php
/**
 * SimDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * SimDetails Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SimDetails extends AbstractDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SimDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_iccid' => 'string',
        'current_imsi' => 'string',
        'current_msisdn' => 'string',
        'donor_carrier' => 'string',
        'pin1' => 'string',
        'pin2' => 'string',
        'previous_iccid' => 'string',
        'previous_imsi' => 'string',
        'previous_msisdn' => 'string',
        'puk1' => 'string',
        'puk2' => 'string',
        'recipient_carrier' => 'string',
        'sim_type' => '\iNew\Rest6_1\Model\SimType'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'current_iccid' => 'currentIccid',
        'current_imsi' => 'currentImsi',
        'current_msisdn' => 'currentMsisdn',
        'donor_carrier' => 'donorCarrier',
        'pin1' => 'pin1',
        'pin2' => 'pin2',
        'previous_iccid' => 'previousIccid',
        'previous_imsi' => 'previousImsi',
        'previous_msisdn' => 'previousMsisdn',
        'puk1' => 'puk1',
        'puk2' => 'puk2',
        'recipient_carrier' => 'recipientCarrier',
        'sim_type' => 'simType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'current_iccid' => 'setCurrentIccid',
        'current_imsi' => 'setCurrentImsi',
        'current_msisdn' => 'setCurrentMsisdn',
        'donor_carrier' => 'setDonorCarrier',
        'pin1' => 'setPin1',
        'pin2' => 'setPin2',
        'previous_iccid' => 'setPreviousIccid',
        'previous_imsi' => 'setPreviousImsi',
        'previous_msisdn' => 'setPreviousMsisdn',
        'puk1' => 'setPuk1',
        'puk2' => 'setPuk2',
        'recipient_carrier' => 'setRecipientCarrier',
        'sim_type' => 'setSimType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'current_iccid' => 'getCurrentIccid',
        'current_imsi' => 'getCurrentImsi',
        'current_msisdn' => 'getCurrentMsisdn',
        'donor_carrier' => 'getDonorCarrier',
        'pin1' => 'getPin1',
        'pin2' => 'getPin2',
        'previous_iccid' => 'getPreviousIccid',
        'previous_imsi' => 'getPreviousImsi',
        'previous_msisdn' => 'getPreviousMsisdn',
        'puk1' => 'getPuk1',
        'puk2' => 'getPuk2',
        'recipient_carrier' => 'getRecipientCarrier',
        'sim_type' => 'getSimType'
    ];

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['current_iccid'] = isset($data['current_iccid']) ? $data['current_iccid'] : null;
        $this->container['current_imsi'] = isset($data['current_imsi']) ? $data['current_imsi'] : null;
        $this->container['current_msisdn'] = isset($data['current_msisdn']) ? $data['current_msisdn'] : null;
        $this->container['donor_carrier'] = isset($data['donor_carrier']) ? $data['donor_carrier'] : null;
        $this->container['pin1'] = isset($data['pin1']) ? $data['pin1'] : null;
        $this->container['pin2'] = isset($data['pin2']) ? $data['pin2'] : null;
        $this->container['previous_iccid'] = isset($data['previous_iccid']) ? $data['previous_iccid'] : null;
        $this->container['previous_imsi'] = isset($data['previous_imsi']) ? $data['previous_imsi'] : null;
        $this->container['previous_msisdn'] = isset($data['previous_msisdn']) ? $data['previous_msisdn'] : null;
        $this->container['puk1'] = isset($data['puk1']) ? $data['puk1'] : null;
        $this->container['puk2'] = isset($data['puk2']) ? $data['puk2'] : null;
        $this->container['recipient_carrier'] = isset($data['recipient_carrier']) ? $data['recipient_carrier'] : null;
        $this->container['sim_type'] = isset($data['sim_type']) ? $data['sim_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = parent::listInvalidProperties();

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets current_iccid
     * @return string
     */
    public function getCurrentIccid()
    {
        return $this->container['current_iccid'];
    }

    /**
     * Sets current_iccid
     * @param string $current_iccid the current ICCID
     * @return $this
     */
    public function setCurrentIccid($current_iccid)
    {
        $this->container['current_iccid'] = $current_iccid;

        return $this;
    }

    /**
     * Gets current_imsi
     * @return string
     */
    public function getCurrentImsi()
    {
        return $this->container['current_imsi'];
    }

    /**
     * Sets current_imsi
     * @param string $current_imsi the current IMSI
     * @return $this
     */
    public function setCurrentImsi($current_imsi)
    {
        $this->container['current_imsi'] = $current_imsi;

        return $this;
    }

    /**
     * Gets current_msisdn
     * @return string
     */
    public function getCurrentMsisdn()
    {
        return $this->container['current_msisdn'];
    }

    /**
     * Sets current_msisdn
     * @param string $current_msisdn the current MSISDN
     * @return $this
     */
    public function setCurrentMsisdn($current_msisdn)
    {
        $this->container['current_msisdn'] = $current_msisdn;

        return $this;
    }

    /**
     * Gets donor_carrier
     * @return string
     */
    public function getDonorCarrier()
    {
        return $this->container['donor_carrier'];
    }

    /**
     * Sets donor_carrier
     * @param string $donor_carrier the donor carrier
     * @return $this
     */
    public function setDonorCarrier($donor_carrier)
    {
        $this->container['donor_carrier'] = $donor_carrier;

        return $this;
    }

    /**
     * Gets pin1
     * @return string
     */
    public function getPin1()
    {
        return $this->container['pin1'];
    }

    /**
     * Sets pin1
     * @param string $pin1 the pin1 code
     * @return $this
     */
    public function setPin1($pin1)
    {
        $this->container['pin1'] = $pin1;

        return $this;
    }

    /**
     * Gets pin2
     * @return string
     */
    public function getPin2()
    {
        return $this->container['pin2'];
    }

    /**
     * Sets pin2
     * @param string $pin2 the pin2 code
     * @return $this
     */
    public function setPin2($pin2)
    {
        $this->container['pin2'] = $pin2;

        return $this;
    }

    /**
     * Gets previous_iccid
     * @return string
     */
    public function getPreviousIccid()
    {
        return $this->container['previous_iccid'];
    }

    /**
     * Sets previous_iccid
     * @param string $previous_iccid the previous ICCID
     * @return $this
     */
    public function setPreviousIccid($previous_iccid)
    {
        $this->container['previous_iccid'] = $previous_iccid;

        return $this;
    }

    /**
     * Gets previous_imsi
     * @return string
     */
    public function getPreviousImsi()
    {
        return $this->container['previous_imsi'];
    }

    /**
     * Sets previous_imsi
     * @param string $previous_imsi the previous IMSI
     * @return $this
     */
    public function setPreviousImsi($previous_imsi)
    {
        $this->container['previous_imsi'] = $previous_imsi;

        return $this;
    }

    /**
     * Gets previous_msisdn
     * @return string
     */
    public function getPreviousMsisdn()
    {
        return $this->container['previous_msisdn'];
    }

    /**
     * Sets previous_msisdn
     * @param string $previous_msisdn the previous MSISDN
     * @return $this
     */
    public function setPreviousMsisdn($previous_msisdn)
    {
        $this->container['previous_msisdn'] = $previous_msisdn;

        return $this;
    }

    /**
     * Gets puk1
     * @return string
     */
    public function getPuk1()
    {
        return $this->container['puk1'];
    }

    /**
     * Sets puk1
     * @param string $puk1 the puk1 code
     * @return $this
     */
    public function setPuk1($puk1)
    {
        $this->container['puk1'] = $puk1;

        return $this;
    }

    /**
     * Gets puk2
     * @return string
     */
    public function getPuk2()
    {
        return $this->container['puk2'];
    }

    /**
     * Sets puk2
     * @param string $puk2 the puk2 code
     * @return $this
     */
    public function setPuk2($puk2)
    {
        $this->container['puk2'] = $puk2;

        return $this;
    }

    /**
     * Gets recipient_carrier
     * @return string
     */
    public function getRecipientCarrier()
    {
        return $this->container['recipient_carrier'];
    }

    /**
     * Sets recipient_carrier
     * @param string $recipient_carrier the recipient carrier
     * @return $this
     */
    public function setRecipientCarrier($recipient_carrier)
    {
        $this->container['recipient_carrier'] = $recipient_carrier;

        return $this;
    }

    /**
     * Gets sim_type
     * @return \iNew\Rest6_1\Model\SimType
     */
    public function getSimType()
    {
        return $this->container['sim_type'];
    }

    /**
     * Sets sim_type
     * @param \iNew\Rest6_1\Model\SimType $sim_type the SIM type
     * @return $this
     */
    public function setSimType($sim_type)
    {
        $this->container['sim_type'] = $sim_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


