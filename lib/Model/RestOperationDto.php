<?php
/**
 * RestOperationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * RestOperationDto Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RestOperationDto implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RestOperationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_control_interceptors' => 'string[]',
        'access_restriction' => '\iNew\Rest6_1\Model\AccessRole',
        'api_version' => 'string',
        'business_logic_interceptors' => '\iNew\Rest6_1\Model\InterceptorDto[]',
        'enabled' => 'bool',
        'exposed' => 'bool',
        'http_method' => '\iNew\Rest6_1\Model\HttpMethod',
        'id' => 'string',
        'summary' => 'string',
        'tags' => 'string[]',
        'type' => '\iNew\Rest6_1\Model\RestOperationType',
        'url_template' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'access_control_interceptors' => 'accessControlInterceptors',
        'access_restriction' => 'accessRestriction',
        'api_version' => 'apiVersion',
        'business_logic_interceptors' => 'businessLogicInterceptors',
        'enabled' => 'enabled',
        'exposed' => 'exposed',
        'http_method' => 'httpMethod',
        'id' => 'id',
        'summary' => 'summary',
        'tags' => 'tags',
        'type' => 'type',
        'url_template' => 'urlTemplate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'access_control_interceptors' => 'setAccessControlInterceptors',
        'access_restriction' => 'setAccessRestriction',
        'api_version' => 'setApiVersion',
        'business_logic_interceptors' => 'setBusinessLogicInterceptors',
        'enabled' => 'setEnabled',
        'exposed' => 'setExposed',
        'http_method' => 'setHttpMethod',
        'id' => 'setId',
        'summary' => 'setSummary',
        'tags' => 'setTags',
        'type' => 'setType',
        'url_template' => 'setUrlTemplate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'access_control_interceptors' => 'getAccessControlInterceptors',
        'access_restriction' => 'getAccessRestriction',
        'api_version' => 'getApiVersion',
        'business_logic_interceptors' => 'getBusinessLogicInterceptors',
        'enabled' => 'getEnabled',
        'exposed' => 'getExposed',
        'http_method' => 'getHttpMethod',
        'id' => 'getId',
        'summary' => 'getSummary',
        'tags' => 'getTags',
        'type' => 'getType',
        'url_template' => 'getUrlTemplate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_control_interceptors'] = isset($data['access_control_interceptors']) ? $data['access_control_interceptors'] : null;
        $this->container['access_restriction'] = isset($data['access_restriction']) ? $data['access_restriction'] : null;
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['business_logic_interceptors'] = isset($data['business_logic_interceptors']) ? $data['business_logic_interceptors'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['exposed'] = isset($data['exposed']) ? $data['exposed'] : null;
        $this->container['http_method'] = isset($data['http_method']) ? $data['http_method'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['url_template'] = isset($data['url_template']) ? $data['url_template'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['access_control_interceptors'] === null) {
            $invalid_properties[] = "'access_control_interceptors' can't be null";
        }
        if ($this->container['access_restriction'] === null) {
            $invalid_properties[] = "'access_restriction' can't be null";
        }
        if ($this->container['api_version'] === null) {
            $invalid_properties[] = "'api_version' can't be null";
        }
        if ($this->container['business_logic_interceptors'] === null) {
            $invalid_properties[] = "'business_logic_interceptors' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalid_properties[] = "'enabled' can't be null";
        }
        if ($this->container['exposed'] === null) {
            $invalid_properties[] = "'exposed' can't be null";
        }
        if ($this->container['http_method'] === null) {
            $invalid_properties[] = "'http_method' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalid_properties[] = "'summary' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalid_properties[] = "'tags' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['url_template'] === null) {
            $invalid_properties[] = "'url_template' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['access_control_interceptors'] === null) {
            return false;
        }
        if ($this->container['access_restriction'] === null) {
            return false;
        }
        if ($this->container['api_version'] === null) {
            return false;
        }
        if ($this->container['business_logic_interceptors'] === null) {
            return false;
        }
        if ($this->container['enabled'] === null) {
            return false;
        }
        if ($this->container['exposed'] === null) {
            return false;
        }
        if ($this->container['http_method'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['summary'] === null) {
            return false;
        }
        if ($this->container['tags'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['url_template'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_control_interceptors
     * @return string[]
     */
    public function getAccessControlInterceptors()
    {
        return $this->container['access_control_interceptors'];
    }

    /**
     * Sets access_control_interceptors
     * @param string[] $access_control_interceptors the accessControlInterceptors
     * @return $this
     */
    public function setAccessControlInterceptors($access_control_interceptors)
    {
        $this->container['access_control_interceptors'] = $access_control_interceptors;

        return $this;
    }

    /**
     * Gets access_restriction
     * @return \iNew\Rest6_1\Model\AccessRole
     */
    public function getAccessRestriction()
    {
        return $this->container['access_restriction'];
    }

    /**
     * Sets access_restriction
     * @param \iNew\Rest6_1\Model\AccessRole $access_restriction the accessRestriction
     * @return $this
     */
    public function setAccessRestriction($access_restriction)
    {
        $this->container['access_restriction'] = $access_restriction;

        return $this;
    }

    /**
     * Gets api_version
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     * @param string $api_version the apiVersion
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets business_logic_interceptors
     * @return \iNew\Rest6_1\Model\InterceptorDto[]
     */
    public function getBusinessLogicInterceptors()
    {
        return $this->container['business_logic_interceptors'];
    }

    /**
     * Sets business_logic_interceptors
     * @param \iNew\Rest6_1\Model\InterceptorDto[] $business_logic_interceptors the businessLogicInterceptors
     * @return $this
     */
    public function setBusinessLogicInterceptors($business_logic_interceptors)
    {
        $this->container['business_logic_interceptors'] = $business_logic_interceptors;

        return $this;
    }

    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled the enabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets exposed
     * @return bool
     */
    public function getExposed()
    {
        return $this->container['exposed'];
    }

    /**
     * Sets exposed
     * @param bool $exposed the exposed
     * @return $this
     */
    public function setExposed($exposed)
    {
        $this->container['exposed'] = $exposed;

        return $this;
    }

    /**
     * Gets http_method
     * @return \iNew\Rest6_1\Model\HttpMethod
     */
    public function getHttpMethod()
    {
        return $this->container['http_method'];
    }

    /**
     * Sets http_method
     * @param \iNew\Rest6_1\Model\HttpMethod $http_method the httpMethod
     * @return $this
     */
    public function setHttpMethod($http_method)
    {
        $this->container['http_method'] = $http_method;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id the id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets summary
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     * @param string $summary the summary
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags the tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets type
     * @return \iNew\Rest6_1\Model\RestOperationType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \iNew\Rest6_1\Model\RestOperationType $type the type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url_template
     * @return string
     */
    public function getUrlTemplate()
    {
        return $this->container['url_template'];
    }

    /**
     * Sets url_template
     * @param string $url_template
     * @return $this
     */
    public function setUrlTemplate($url_template)
    {
        $this->container['url_template'] = $url_template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


