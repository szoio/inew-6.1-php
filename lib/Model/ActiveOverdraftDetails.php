<?php
/**
 * ActiveOverdraftDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * ActiveOverdraftDetails Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ActiveOverdraftDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ActiveOverdraftDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activation_date' => '\DateTime',
        'activation_fee' => 'int',
        'after_grace_period_fee' => 'int',
        'currency_id' => 'int',
        'currency_name' => 'string',
        'currency_unit_relation' => 'int',
        'eligible_amount' => 'int',
        'grace_period' => 'int',
        'grace_period_end_date' => '\DateTime',
        'loan_amount' => 'int',
        'outstanding_amount' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_date' => 'activationDate',
        'activation_fee' => 'activationFee',
        'after_grace_period_fee' => 'afterGracePeriodFee',
        'currency_id' => 'currencyId',
        'currency_name' => 'currencyName',
        'currency_unit_relation' => 'currencyUnitRelation',
        'eligible_amount' => 'eligibleAmount',
        'grace_period' => 'gracePeriod',
        'grace_period_end_date' => 'gracePeriodEndDate',
        'loan_amount' => 'loanAmount',
        'outstanding_amount' => 'outstandingAmount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activation_date' => 'setActivationDate',
        'activation_fee' => 'setActivationFee',
        'after_grace_period_fee' => 'setAfterGracePeriodFee',
        'currency_id' => 'setCurrencyId',
        'currency_name' => 'setCurrencyName',
        'currency_unit_relation' => 'setCurrencyUnitRelation',
        'eligible_amount' => 'setEligibleAmount',
        'grace_period' => 'setGracePeriod',
        'grace_period_end_date' => 'setGracePeriodEndDate',
        'loan_amount' => 'setLoanAmount',
        'outstanding_amount' => 'setOutstandingAmount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activation_date' => 'getActivationDate',
        'activation_fee' => 'getActivationFee',
        'after_grace_period_fee' => 'getAfterGracePeriodFee',
        'currency_id' => 'getCurrencyId',
        'currency_name' => 'getCurrencyName',
        'currency_unit_relation' => 'getCurrencyUnitRelation',
        'eligible_amount' => 'getEligibleAmount',
        'grace_period' => 'getGracePeriod',
        'grace_period_end_date' => 'getGracePeriodEndDate',
        'loan_amount' => 'getLoanAmount',
        'outstanding_amount' => 'getOutstandingAmount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['activation_fee'] = isset($data['activation_fee']) ? $data['activation_fee'] : null;
        $this->container['after_grace_period_fee'] = isset($data['after_grace_period_fee']) ? $data['after_grace_period_fee'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['currency_unit_relation'] = isset($data['currency_unit_relation']) ? $data['currency_unit_relation'] : null;
        $this->container['eligible_amount'] = isset($data['eligible_amount']) ? $data['eligible_amount'] : null;
        $this->container['grace_period'] = isset($data['grace_period']) ? $data['grace_period'] : null;
        $this->container['grace_period_end_date'] = isset($data['grace_period_end_date']) ? $data['grace_period_end_date'] : null;
        $this->container['loan_amount'] = isset($data['loan_amount']) ? $data['loan_amount'] : null;
        $this->container['outstanding_amount'] = isset($data['outstanding_amount']) ? $data['outstanding_amount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['activation_date'] === null) {
            $invalid_properties[] = "'activation_date' can't be null";
        }
        if ($this->container['activation_fee'] === null) {
            $invalid_properties[] = "'activation_fee' can't be null";
        }
        if ($this->container['after_grace_period_fee'] === null) {
            $invalid_properties[] = "'after_grace_period_fee' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalid_properties[] = "'currency_id' can't be null";
        }
        if ($this->container['currency_name'] === null) {
            $invalid_properties[] = "'currency_name' can't be null";
        }
        if ($this->container['currency_unit_relation'] === null) {
            $invalid_properties[] = "'currency_unit_relation' can't be null";
        }
        if ($this->container['eligible_amount'] === null) {
            $invalid_properties[] = "'eligible_amount' can't be null";
        }
        if ($this->container['grace_period'] === null) {
            $invalid_properties[] = "'grace_period' can't be null";
        }
        if ($this->container['grace_period_end_date'] === null) {
            $invalid_properties[] = "'grace_period_end_date' can't be null";
        }
        if ($this->container['loan_amount'] === null) {
            $invalid_properties[] = "'loan_amount' can't be null";
        }
        if ($this->container['outstanding_amount'] === null) {
            $invalid_properties[] = "'outstanding_amount' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['activation_date'] === null) {
            return false;
        }
        if ($this->container['activation_fee'] === null) {
            return false;
        }
        if ($this->container['after_grace_period_fee'] === null) {
            return false;
        }
        if ($this->container['currency_id'] === null) {
            return false;
        }
        if ($this->container['currency_name'] === null) {
            return false;
        }
        if ($this->container['currency_unit_relation'] === null) {
            return false;
        }
        if ($this->container['eligible_amount'] === null) {
            return false;
        }
        if ($this->container['grace_period'] === null) {
            return false;
        }
        if ($this->container['grace_period_end_date'] === null) {
            return false;
        }
        if ($this->container['loan_amount'] === null) {
            return false;
        }
        if ($this->container['outstanding_amount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets activation_date
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     * @param \DateTime $activation_date the activation date of the overdraft functionality, i.e. when the loan was issued
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets activation_fee
     * @return int
     */
    public function getActivationFee()
    {
        return $this->container['activation_fee'];
    }

    /**
     * Sets activation_fee
     * @param int $activation_fee the activation fee that the subscription owes when the overdraft functionality is activated
     * @return $this
     */
    public function setActivationFee($activation_fee)
    {
        $this->container['activation_fee'] = $activation_fee;

        return $this;
    }

    /**
     * Gets after_grace_period_fee
     * @return int
     */
    public function getAfterGracePeriodFee()
    {
        return $this->container['after_grace_period_fee'];
    }

    /**
     * Sets after_grace_period_fee
     * @param int $after_grace_period_fee the additional late fee in case there is the overdraft is not paid back by topups the grace period
     * @return $this
     */
    public function setAfterGracePeriodFee($after_grace_period_fee)
    {
        $this->container['after_grace_period_fee'] = $after_grace_period_fee;

        return $this;
    }

    /**
     * Gets currency_id
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     * @param int $currency_id the currencyId of the currency the amounts are represented in
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_name
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     * @param string $currency_name the currencyName the amounts are represented in
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets currency_unit_relation
     * @return int
     */
    public function getCurrencyUnitRelation()
    {
        return $this->container['currency_unit_relation'];
    }

    /**
     * Sets currency_unit_relation
     * @param int $currency_unit_relation the currencyUnitRelation, the value by which the amounts/fees need to be divided to get the natural representation<br> e.g. activationFee=500 (cents), currency=\"Euro\", currencyUnitRelation=100 (1 Euro = 100 cents) this would mean that the lateFee is 5€
     * @return $this
     */
    public function setCurrencyUnitRelation($currency_unit_relation)
    {
        $this->container['currency_unit_relation'] = $currency_unit_relation;

        return $this;
    }

    /**
     * Gets eligible_amount
     * @return int
     */
    public function getEligibleAmount()
    {
        return $this->container['eligible_amount'];
    }

    /**
     * Sets eligible_amount
     * @param int $eligible_amount the eligibleAmount the amount the subscription is eligible for
     * @return $this
     */
    public function setEligibleAmount($eligible_amount)
    {
        $this->container['eligible_amount'] = $eligible_amount;

        return $this;
    }

    /**
     * Gets grace_period
     * @return int
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     * @param int $grace_period the grace period in which no additional fees have to be paid if overdraft is paid back (in hours)
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets grace_period_end_date
     * @return \DateTime
     */
    public function getGracePeriodEndDate()
    {
        return $this->container['grace_period_end_date'];
    }

    /**
     * Sets grace_period_end_date
     * @param \DateTime $grace_period_end_date the date when the grace period until additional fees have to be paid ends
     * @return $this
     */
    public function setGracePeriodEndDate($grace_period_end_date)
    {
        $this->container['grace_period_end_date'] = $grace_period_end_date;

        return $this;
    }

    /**
     * Gets loan_amount
     * @return int
     */
    public function getLoanAmount()
    {
        return $this->container['loan_amount'];
    }

    /**
     * Sets loan_amount
     * @param int $loan_amount the amount that was loaned to the subscription
     * @return $this
     */
    public function setLoanAmount($loan_amount)
    {
        $this->container['loan_amount'] = $loan_amount;

        return $this;
    }

    /**
     * Gets outstanding_amount
     * @return int
     */
    public function getOutstandingAmount()
    {
        return $this->container['outstanding_amount'];
    }

    /**
     * Sets outstanding_amount
     * @param int $outstanding_amount the total amount that is outstanding, the loaned amount plus any fees minus already repaid amount
     * @return $this
     */
    public function setOutstandingAmount($outstanding_amount)
    {
        $this->container['outstanding_amount'] = $outstanding_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


