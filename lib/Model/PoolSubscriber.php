<?php
/**
 * PoolSubscriber
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * PoolSubscriber Class Doc Comment
 *
 * @category    Class
 * @description Represents one subscriber in a pool
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PoolSubscriber implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PoolSubscriber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activation_date' => '\DateTime',
        'authorized' => 'bool',
        'msisdn' => 'string',
        'role' => '\iNew\Rest6_1\Model\PoolRole',
        'subscriber_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_date' => 'activationDate',
        'authorized' => 'authorized',
        'msisdn' => 'msisdn',
        'role' => 'role',
        'subscriber_id' => 'subscriberId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activation_date' => 'setActivationDate',
        'authorized' => 'setAuthorized',
        'msisdn' => 'setMsisdn',
        'role' => 'setRole',
        'subscriber_id' => 'setSubscriberId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activation_date' => 'getActivationDate',
        'authorized' => 'getAuthorized',
        'msisdn' => 'getMsisdn',
        'role' => 'getRole',
        'subscriber_id' => 'getSubscriberId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['authorized'] = isset($data['authorized']) ? $data['authorized'] : null;
        $this->container['msisdn'] = isset($data['msisdn']) ? $data['msisdn'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['subscriber_id'] = isset($data['subscriber_id']) ? $data['subscriber_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['authorized'] === null) {
            $invalid_properties[] = "'authorized' can't be null";
        }
        if ($this->container['msisdn'] === null) {
            $invalid_properties[] = "'msisdn' can't be null";
        }
        if ($this->container['role'] === null) {
            $invalid_properties[] = "'role' can't be null";
        }
        if ($this->container['subscriber_id'] === null) {
            $invalid_properties[] = "'subscriber_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['authorized'] === null) {
            return false;
        }
        if ($this->container['msisdn'] === null) {
            return false;
        }
        if ($this->container['role'] === null) {
            return false;
        }
        if ($this->container['subscriber_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets activation_date
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     * @param \DateTime $activation_date the date when subscriber was added to the pool
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets authorized
     * @return bool
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     * @param bool $authorized
     * @return $this
     */
    public function setAuthorized($authorized)
    {
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets msisdn
     * @return string
     */
    public function getMsisdn()
    {
        return $this->container['msisdn'];
    }

    /**
     * Sets msisdn
     * @param string $msisdn the MSISDN of the subscriber
     * @return $this
     */
    public function setMsisdn($msisdn)
    {
        $this->container['msisdn'] = $msisdn;

        return $this;
    }

    /**
     * Gets role
     * @return \iNew\Rest6_1\Model\PoolRole
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     * @param \iNew\Rest6_1\Model\PoolRole $role the role of the subscriber in the pool
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets subscriber_id
     * @return int
     */
    public function getSubscriberId()
    {
        return $this->container['subscriber_id'];
    }

    /**
     * Sets subscriber_id
     * @param int $subscriber_id the id of the subscriber
     * @return $this
     */
    public function setSubscriberId($subscriber_id)
    {
        $this->container['subscriber_id'] = $subscriber_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


