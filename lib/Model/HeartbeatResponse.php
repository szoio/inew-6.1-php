<?php
/**
 * HeartbeatResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * HeartbeatResponse Class Doc Comment
 *
 * @category    Class
 * @description HeartbeatResponse is used to inform any requesters about the state and health of this component
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HeartbeatResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HeartbeatResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'correlation_id' => 'string',
        'load' => '\iNew\Rest6_1\Model\SystemLoad',
        'load_factor' => 'int',
        'state' => '\iNew\Rest6_1\Model\SystemState',
        'timestamp' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'correlation_id' => 'correlationId',
        'load' => 'load',
        'load_factor' => 'loadFactor',
        'state' => 'state',
        'timestamp' => 'timestamp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'correlation_id' => 'setCorrelationId',
        'load' => 'setLoad',
        'load_factor' => 'setLoadFactor',
        'state' => 'setState',
        'timestamp' => 'setTimestamp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'correlation_id' => 'getCorrelationId',
        'load' => 'getLoad',
        'load_factor' => 'getLoadFactor',
        'state' => 'getState',
        'timestamp' => 'getTimestamp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['correlation_id'] = isset($data['correlation_id']) ? $data['correlation_id'] : null;
        $this->container['load'] = isset($data['load']) ? $data['load'] : null;
        $this->container['load_factor'] = isset($data['load_factor']) ? $data['load_factor'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['load'] === null) {
            $invalid_properties[] = "'load' can't be null";
        }
        if ($this->container['load_factor'] === null) {
            $invalid_properties[] = "'load_factor' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalid_properties[] = "'state' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalid_properties[] = "'timestamp' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['load'] === null) {
            return false;
        }
        if ($this->container['load_factor'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        if ($this->container['timestamp'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets correlation_id
     * @return string
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     * @param string $correlation_id This field is used to correlate requests and responses in case of asynchronous communication via JMS
     * @return $this
     */
    public function setCorrelationId($correlation_id)
    {
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets load
     * @return \iNew\Rest6_1\Model\SystemLoad
     */
    public function getLoad()
    {
        return $this->container['load'];
    }

    /**
     * Sets load
     * @param \iNew\Rest6_1\Model\SystemLoad $load the load
     * @return $this
     */
    public function setLoad($load)
    {
        $this->container['load'] = $load;

        return $this;
    }

    /**
     * Gets load_factor
     * @return int
     */
    public function getLoadFactor()
    {
        return $this->container['load_factor'];
    }

    /**
     * Sets load_factor
     * @param int $load_factor the loadFactor
     * @return $this
     */
    public function setLoadFactor($load_factor)
    {
        $this->container['load_factor'] = $load_factor;

        return $this;
    }

    /**
     * Gets state
     * @return \iNew\Rest6_1\Model\SystemState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param \iNew\Rest6_1\Model\SystemState $state the state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param int $timestamp the timestamp of creation of the HeartbeatRequest in milliseconds System#currentTimeMillis()
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


