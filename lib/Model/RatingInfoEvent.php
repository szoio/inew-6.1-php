<?php
/**
 * RatingInfoEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * RatingInfoEvent Class Doc Comment
 *
 * @category    Class
 * @description Encapsulates all rating information with pricing per period
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RatingInfoEvent implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RatingInfoEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_id' => 'int',
        'currency_name' => 'string',
        'currency_unit_relation' => 'int',
        'period' => 'int',
        'period_unit' => '\iNew\Rest6_1\Model\PeriodUnit1',
        'price' => 'int',
        'setup_period' => 'int',
        'setup_price' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_id' => 'currencyId',
        'currency_name' => 'currencyName',
        'currency_unit_relation' => 'currencyUnitRelation',
        'period' => 'period',
        'period_unit' => 'periodUnit',
        'price' => 'price',
        'setup_period' => 'setupPeriod',
        'setup_price' => 'setupPrice'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'currency_id' => 'setCurrencyId',
        'currency_name' => 'setCurrencyName',
        'currency_unit_relation' => 'setCurrencyUnitRelation',
        'period' => 'setPeriod',
        'period_unit' => 'setPeriodUnit',
        'price' => 'setPrice',
        'setup_period' => 'setSetupPeriod',
        'setup_price' => 'setSetupPrice'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'currency_id' => 'getCurrencyId',
        'currency_name' => 'getCurrencyName',
        'currency_unit_relation' => 'getCurrencyUnitRelation',
        'period' => 'getPeriod',
        'period_unit' => 'getPeriodUnit',
        'price' => 'getPrice',
        'setup_period' => 'getSetupPeriod',
        'setup_price' => 'getSetupPrice'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['currency_unit_relation'] = isset($data['currency_unit_relation']) ? $data['currency_unit_relation'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['period_unit'] = isset($data['period_unit']) ? $data['period_unit'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['setup_period'] = isset($data['setup_period']) ? $data['setup_period'] : null;
        $this->container['setup_price'] = isset($data['setup_price']) ? $data['setup_price'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['currency_id'] === null) {
            $invalid_properties[] = "'currency_id' can't be null";
        }
        if ($this->container['currency_name'] === null) {
            $invalid_properties[] = "'currency_name' can't be null";
        }
        if ($this->container['currency_unit_relation'] === null) {
            $invalid_properties[] = "'currency_unit_relation' can't be null";
        }
        if ($this->container['period'] === null) {
            $invalid_properties[] = "'period' can't be null";
        }
        if ($this->container['period_unit'] === null) {
            $invalid_properties[] = "'period_unit' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalid_properties[] = "'price' can't be null";
        }
        if ($this->container['setup_period'] === null) {
            $invalid_properties[] = "'setup_period' can't be null";
        }
        if ($this->container['setup_price'] === null) {
            $invalid_properties[] = "'setup_price' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['currency_id'] === null) {
            return false;
        }
        if ($this->container['currency_name'] === null) {
            return false;
        }
        if ($this->container['currency_unit_relation'] === null) {
            return false;
        }
        if ($this->container['period'] === null) {
            return false;
        }
        if ($this->container['period_unit'] === null) {
            return false;
        }
        if ($this->container['price'] === null) {
            return false;
        }
        if ($this->container['setup_period'] === null) {
            return false;
        }
        if ($this->container['setup_price'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets currency_id
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     * @param int $currency_id Price currencyId for Service(call session, event, data session)
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_name
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     * @param string $currency_name Price currency name for Service(call session, event, data session)
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets currency_unit_relation
     * @return int
     */
    public function getCurrencyUnitRelation()
    {
        return $this->container['currency_unit_relation'];
    }

    /**
     * Sets currency_unit_relation
     * @param int $currency_unit_relation Price currency unit relation for Service(call session, event, data session)
     * @return $this
     */
    public function setCurrencyUnitRelation($currency_unit_relation)
    {
        $this->container['currency_unit_relation'] = $currency_unit_relation;

        return $this;
    }

    /**
     * Gets period
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param int $period Setup Period for Service(call session, event, data session)
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets period_unit
     * @return \iNew\Rest6_1\Model\PeriodUnit1
     */
    public function getPeriodUnit()
    {
        return $this->container['period_unit'];
    }

    /**
     * Sets period_unit
     * @param \iNew\Rest6_1\Model\PeriodUnit1 $period_unit Period unit in which rate price is calculated for Service(call session, event, data session)
     * @return $this
     */
    public function setPeriodUnit($period_unit)
    {
        $this->container['period_unit'] = $period_unit;

        return $this;
    }

    /**
     * Gets price
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param int $price Price per unit for Service(call session, event, data session)
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets setup_period
     * @return int
     */
    public function getSetupPeriod()
    {
        return $this->container['setup_period'];
    }

    /**
     * Sets setup_period
     * @param int $setup_period Setup Period for Service(call session, event, data session)
     * @return $this
     */
    public function setSetupPeriod($setup_period)
    {
        $this->container['setup_period'] = $setup_period;

        return $this;
    }

    /**
     * Gets setup_price
     * @return int
     */
    public function getSetupPrice()
    {
        return $this->container['setup_price'];
    }

    /**
     * Sets setup_price
     * @param int $setup_price Setup Price for Service(call session, event, data session)
     * @return $this
     */
    public function setSetupPrice($setup_price)
    {
        $this->container['setup_price'] = $setup_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


