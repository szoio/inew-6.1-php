<?php
/**
 * SummaryType
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * SummaryType Class Doc Comment
 *
 * @category    Class
 * @description &lt;p&gt; User: michael Date: Aug 4, 2009 Time: 11:44:34 AM &lt;/p&gt;
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SummaryType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SummaryType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balance' => 'int',
        'currency_id' => 'int',
        'currency_name' => 'string',
        'expiry_amount' => 'int',
        'expiry_date' => '\DateTime',
        'reserved_balance' => 'int',
        'unit' => '\iNew\Rest6_1\Model\CurrencyUnitType',
        'unit_id' => 'int',
        'unlimited' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'currency_id' => 'currencyId',
        'currency_name' => 'currencyName',
        'expiry_amount' => 'expiryAmount',
        'expiry_date' => 'expiryDate',
        'reserved_balance' => 'reservedBalance',
        'unit' => 'unit',
        'unit_id' => 'unitId',
        'unlimited' => 'unlimited'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'currency_id' => 'setCurrencyId',
        'currency_name' => 'setCurrencyName',
        'expiry_amount' => 'setExpiryAmount',
        'expiry_date' => 'setExpiryDate',
        'reserved_balance' => 'setReservedBalance',
        'unit' => 'setUnit',
        'unit_id' => 'setUnitId',
        'unlimited' => 'setUnlimited'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'currency_id' => 'getCurrencyId',
        'currency_name' => 'getCurrencyName',
        'expiry_amount' => 'getExpiryAmount',
        'expiry_date' => 'getExpiryDate',
        'reserved_balance' => 'getReservedBalance',
        'unit' => 'getUnit',
        'unit_id' => 'getUnitId',
        'unlimited' => 'getUnlimited'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['expiry_amount'] = isset($data['expiry_amount']) ? $data['expiry_amount'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['reserved_balance'] = isset($data['reserved_balance']) ? $data['reserved_balance'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unlimited'] = isset($data['unlimited']) ? $data['unlimited'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['balance'] === null) {
            $invalid_properties[] = "'balance' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalid_properties[] = "'currency_id' can't be null";
        }
        if ($this->container['currency_name'] === null) {
            $invalid_properties[] = "'currency_name' can't be null";
        }
        if ($this->container['expiry_amount'] === null) {
            $invalid_properties[] = "'expiry_amount' can't be null";
        }
        if ($this->container['expiry_date'] === null) {
            $invalid_properties[] = "'expiry_date' can't be null";
        }
        if ($this->container['reserved_balance'] === null) {
            $invalid_properties[] = "'reserved_balance' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalid_properties[] = "'unit' can't be null";
        }
        if ($this->container['unit_id'] === null) {
            $invalid_properties[] = "'unit_id' can't be null";
        }
        if ($this->container['unlimited'] === null) {
            $invalid_properties[] = "'unlimited' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['balance'] === null) {
            return false;
        }
        if ($this->container['currency_id'] === null) {
            return false;
        }
        if ($this->container['currency_name'] === null) {
            return false;
        }
        if ($this->container['expiry_amount'] === null) {
            return false;
        }
        if ($this->container['expiry_date'] === null) {
            return false;
        }
        if ($this->container['reserved_balance'] === null) {
            return false;
        }
        if ($this->container['unit'] === null) {
            return false;
        }
        if ($this->container['unit_id'] === null) {
            return false;
        }
        if ($this->container['unlimited'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets balance
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param int $balance
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets currency_id
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     * @param int $currency_id
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_name
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     * @param string $currency_name the currencyName
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets expiry_amount
     * @return int
     */
    public function getExpiryAmount()
    {
        return $this->container['expiry_amount'];
    }

    /**
     * Sets expiry_amount
     * @param int $expiry_amount
     * @return $this
     */
    public function setExpiryAmount($expiry_amount)
    {
        $this->container['expiry_amount'] = $expiry_amount;

        return $this;
    }

    /**
     * Gets expiry_date
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     * @param \DateTime $expiry_date
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets reserved_balance
     * @return int
     */
    public function getReservedBalance()
    {
        return $this->container['reserved_balance'];
    }

    /**
     * Sets reserved_balance
     * @param int $reserved_balance the reservedBalance
     * @return $this
     */
    public function setReservedBalance($reserved_balance)
    {
        $this->container['reserved_balance'] = $reserved_balance;

        return $this;
    }

    /**
     * Gets unit
     * @return \iNew\Rest6_1\Model\CurrencyUnitType
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     * @param \iNew\Rest6_1\Model\CurrencyUnitType $unit the unit
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets unit_id
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     * @param int $unit_id
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unlimited
     * @return bool
     */
    public function getUnlimited()
    {
        return $this->container['unlimited'];
    }

    /**
     * Sets unlimited
     * @param bool $unlimited the unlimited
     * @return $this
     */
    public function setUnlimited($unlimited)
    {
        $this->container['unlimited'] = $unlimited;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


