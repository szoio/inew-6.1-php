<?php
/**
 * ReferralCodeInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * ReferralCodeInfo Class Doc Comment
 *
 * @category    Class
 * @description Defines the referral code, its valid period and the reward associated with this code
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReferralCodeInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ReferralCodeInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data_only_reward' => '\iNew\Rest6_1\Model\Reward',
        'recurring' => 'bool',
        'ref_code' => 'string',
        'reward' => '\iNew\Rest6_1\Model\Reward',
        'usage_limit' => 'int',
        'valid_period' => '\iNew\Rest6_1\Model\Period1'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'data_only_reward' => 'dataOnlyReward',
        'recurring' => 'recurring',
        'ref_code' => 'refCode',
        'reward' => 'reward',
        'usage_limit' => 'usageLimit',
        'valid_period' => 'validPeriod'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'data_only_reward' => 'setDataOnlyReward',
        'recurring' => 'setRecurring',
        'ref_code' => 'setRefCode',
        'reward' => 'setReward',
        'usage_limit' => 'setUsageLimit',
        'valid_period' => 'setValidPeriod'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'data_only_reward' => 'getDataOnlyReward',
        'recurring' => 'getRecurring',
        'ref_code' => 'getRefCode',
        'reward' => 'getReward',
        'usage_limit' => 'getUsageLimit',
        'valid_period' => 'getValidPeriod'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_only_reward'] = isset($data['data_only_reward']) ? $data['data_only_reward'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : null;
        $this->container['ref_code'] = isset($data['ref_code']) ? $data['ref_code'] : null;
        $this->container['reward'] = isset($data['reward']) ? $data['reward'] : null;
        $this->container['usage_limit'] = isset($data['usage_limit']) ? $data['usage_limit'] : null;
        $this->container['valid_period'] = isset($data['valid_period']) ? $data['valid_period'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['data_only_reward'] === null) {
            $invalid_properties[] = "'data_only_reward' can't be null";
        }
        if ($this->container['recurring'] === null) {
            $invalid_properties[] = "'recurring' can't be null";
        }
        if ($this->container['ref_code'] === null) {
            $invalid_properties[] = "'ref_code' can't be null";
        }
        if ($this->container['reward'] === null) {
            $invalid_properties[] = "'reward' can't be null";
        }
        if ($this->container['usage_limit'] === null) {
            $invalid_properties[] = "'usage_limit' can't be null";
        }
        if ($this->container['valid_period'] === null) {
            $invalid_properties[] = "'valid_period' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['data_only_reward'] === null) {
            return false;
        }
        if ($this->container['recurring'] === null) {
            return false;
        }
        if ($this->container['ref_code'] === null) {
            return false;
        }
        if ($this->container['reward'] === null) {
            return false;
        }
        if ($this->container['usage_limit'] === null) {
            return false;
        }
        if ($this->container['valid_period'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets data_only_reward
     * @return \iNew\Rest6_1\Model\Reward
     */
    public function getDataOnlyReward()
    {
        return $this->container['data_only_reward'];
    }

    /**
     * Sets data_only_reward
     * @param \iNew\Rest6_1\Model\Reward $data_only_reward Reward specific for the data only subscriptions
     * @return $this
     */
    public function setDataOnlyReward($data_only_reward)
    {
        $this->container['data_only_reward'] = $data_only_reward;

        return $this;
    }

    /**
     * Gets recurring
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     * @param bool $recurring True if the referral code is recurring
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets ref_code
     * @return string
     */
    public function getRefCode()
    {
        return $this->container['ref_code'];
    }

    /**
     * Sets ref_code
     * @param string $ref_code Unique referral code string
     * @return $this
     */
    public function setRefCode($ref_code)
    {
        $this->container['ref_code'] = $ref_code;

        return $this;
    }

    /**
     * Gets reward
     * @return \iNew\Rest6_1\Model\Reward
     */
    public function getReward()
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     * @param \iNew\Rest6_1\Model\Reward $reward Reward associated with this referral code
     * @return $this
     */
    public function setReward($reward)
    {
        $this->container['reward'] = $reward;

        return $this;
    }

    /**
     * Gets usage_limit
     * @return int
     */
    public function getUsageLimit()
    {
        return $this->container['usage_limit'];
    }

    /**
     * Sets usage_limit
     * @param int $usage_limit Usage count for the referral code
     * @return $this
     */
    public function setUsageLimit($usage_limit)
    {
        $this->container['usage_limit'] = $usage_limit;

        return $this;
    }

    /**
     * Gets valid_period
     * @return \iNew\Rest6_1\Model\Period1
     */
    public function getValidPeriod()
    {
        return $this->container['valid_period'];
    }

    /**
     * Sets valid_period
     * @param \iNew\Rest6_1\Model\Period1 $valid_period A time period when the referral code is valid
     * @return $this
     */
    public function setValidPeriod($valid_period)
    {
        $this->container['valid_period'] = $valid_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


