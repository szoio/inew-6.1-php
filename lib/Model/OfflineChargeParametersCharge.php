<?php
/**
 * OfflineChargeParametersCharge
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * OfflineChargeParametersCharge Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OfflineChargeParametersCharge implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OfflineChargeParametersCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'answer_time' => '\DateTime',
        'apn' => 'string',
        'bearer_type' => 'string',
        'cdpa' => 'string',
        'cgpa' => 'string',
        'charge' => 'int',
        'clip' => 'bool',
        'currency' => 'string',
        'message_type_indicator' => 'string',
        'rating_group' => 'int',
        'reference_number' => 'string',
        'roaming' => 'bool',
        'start_time' => '\DateTime',
        'subscriber_location' => 'string',
        'total_duration' => 'int',
        'total_units' => 'int',
        'traffic_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'answer_time' => 'answerTime',
        'apn' => 'apn',
        'bearer_type' => 'bearerType',
        'cdpa' => 'cdpa',
        'cgpa' => 'cgpa',
        'charge' => 'charge',
        'clip' => 'clip',
        'currency' => 'currency',
        'message_type_indicator' => 'messageTypeIndicator',
        'rating_group' => 'ratingGroup',
        'reference_number' => 'referenceNumber',
        'roaming' => 'roaming',
        'start_time' => 'startTime',
        'subscriber_location' => 'subscriberLocation',
        'total_duration' => 'totalDuration',
        'total_units' => 'totalUnits',
        'traffic_type' => 'trafficType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'answer_time' => 'setAnswerTime',
        'apn' => 'setApn',
        'bearer_type' => 'setBearerType',
        'cdpa' => 'setCdpa',
        'cgpa' => 'setCgpa',
        'charge' => 'setCharge',
        'clip' => 'setClip',
        'currency' => 'setCurrency',
        'message_type_indicator' => 'setMessageTypeIndicator',
        'rating_group' => 'setRatingGroup',
        'reference_number' => 'setReferenceNumber',
        'roaming' => 'setRoaming',
        'start_time' => 'setStartTime',
        'subscriber_location' => 'setSubscriberLocation',
        'total_duration' => 'setTotalDuration',
        'total_units' => 'setTotalUnits',
        'traffic_type' => 'setTrafficType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'answer_time' => 'getAnswerTime',
        'apn' => 'getApn',
        'bearer_type' => 'getBearerType',
        'cdpa' => 'getCdpa',
        'cgpa' => 'getCgpa',
        'charge' => 'getCharge',
        'clip' => 'getClip',
        'currency' => 'getCurrency',
        'message_type_indicator' => 'getMessageTypeIndicator',
        'rating_group' => 'getRatingGroup',
        'reference_number' => 'getReferenceNumber',
        'roaming' => 'getRoaming',
        'start_time' => 'getStartTime',
        'subscriber_location' => 'getSubscriberLocation',
        'total_duration' => 'getTotalDuration',
        'total_units' => 'getTotalUnits',
        'traffic_type' => 'getTrafficType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['answer_time'] = isset($data['answer_time']) ? $data['answer_time'] : null;
        $this->container['apn'] = isset($data['apn']) ? $data['apn'] : null;
        $this->container['bearer_type'] = isset($data['bearer_type']) ? $data['bearer_type'] : null;
        $this->container['cdpa'] = isset($data['cdpa']) ? $data['cdpa'] : null;
        $this->container['cgpa'] = isset($data['cgpa']) ? $data['cgpa'] : null;
        $this->container['charge'] = isset($data['charge']) ? $data['charge'] : null;
        $this->container['clip'] = isset($data['clip']) ? $data['clip'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['message_type_indicator'] = isset($data['message_type_indicator']) ? $data['message_type_indicator'] : null;
        $this->container['rating_group'] = isset($data['rating_group']) ? $data['rating_group'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['roaming'] = isset($data['roaming']) ? $data['roaming'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['subscriber_location'] = isset($data['subscriber_location']) ? $data['subscriber_location'] : null;
        $this->container['total_duration'] = isset($data['total_duration']) ? $data['total_duration'] : null;
        $this->container['total_units'] = isset($data['total_units']) ? $data['total_units'] : null;
        $this->container['traffic_type'] = isset($data['traffic_type']) ? $data['traffic_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets answer_time
     * @return \DateTime
     */
    public function getAnswerTime()
    {
        return $this->container['answer_time'];
    }

    /**
     * Sets answer_time
     * @param \DateTime $answer_time the answerTime
     * @return $this
     */
    public function setAnswerTime($answer_time)
    {
        $this->container['answer_time'] = $answer_time;

        return $this;
    }

    /**
     * Gets apn
     * @return string
     */
    public function getApn()
    {
        return $this->container['apn'];
    }

    /**
     * Sets apn
     * @param string $apn the apn
     * @return $this
     */
    public function setApn($apn)
    {
        $this->container['apn'] = $apn;

        return $this;
    }

    /**
     * Gets bearer_type
     * @return string
     */
    public function getBearerType()
    {
        return $this->container['bearer_type'];
    }

    /**
     * Sets bearer_type
     * @param string $bearer_type the bearerType
     * @return $this
     */
    public function setBearerType($bearer_type)
    {
        $this->container['bearer_type'] = $bearer_type;

        return $this;
    }

    /**
     * Gets cdpa
     * @return string
     */
    public function getCdpa()
    {
        return $this->container['cdpa'];
    }

    /**
     * Sets cdpa
     * @param string $cdpa the cdpa
     * @return $this
     */
    public function setCdpa($cdpa)
    {
        $this->container['cdpa'] = $cdpa;

        return $this;
    }

    /**
     * Gets cgpa
     * @return string
     */
    public function getCgpa()
    {
        return $this->container['cgpa'];
    }

    /**
     * Sets cgpa
     * @param string $cgpa the cgpa
     * @return $this
     */
    public function setCgpa($cgpa)
    {
        $this->container['cgpa'] = $cgpa;

        return $this;
    }

    /**
     * Gets charge
     * @return int
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     * @param int $charge the charge
     * @return $this
     */
    public function setCharge($charge)
    {
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets clip
     * @return bool
     */
    public function getClip()
    {
        return $this->container['clip'];
    }

    /**
     * Sets clip
     * @param bool $clip the clip
     * @return $this
     */
    public function setClip($clip)
    {
        $this->container['clip'] = $clip;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency the currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets message_type_indicator
     * @return string
     */
    public function getMessageTypeIndicator()
    {
        return $this->container['message_type_indicator'];
    }

    /**
     * Sets message_type_indicator
     * @param string $message_type_indicator the messageTypeIndicator
     * @return $this
     */
    public function setMessageTypeIndicator($message_type_indicator)
    {
        $this->container['message_type_indicator'] = $message_type_indicator;

        return $this;
    }

    /**
     * Gets rating_group
     * @return int
     */
    public function getRatingGroup()
    {
        return $this->container['rating_group'];
    }

    /**
     * Sets rating_group
     * @param int $rating_group the ratingGroup
     * @return $this
     */
    public function setRatingGroup($rating_group)
    {
        $this->container['rating_group'] = $rating_group;

        return $this;
    }

    /**
     * Gets reference_number
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     * @param string $reference_number the referenceNumber
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets roaming
     * @return bool
     */
    public function getRoaming()
    {
        return $this->container['roaming'];
    }

    /**
     * Sets roaming
     * @param bool $roaming the roaming
     * @return $this
     */
    public function setRoaming($roaming)
    {
        $this->container['roaming'] = $roaming;

        return $this;
    }

    /**
     * Gets start_time
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param \DateTime $start_time the startTime
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets subscriber_location
     * @return string
     */
    public function getSubscriberLocation()
    {
        return $this->container['subscriber_location'];
    }

    /**
     * Sets subscriber_location
     * @param string $subscriber_location the subscriberLocation
     * @return $this
     */
    public function setSubscriberLocation($subscriber_location)
    {
        $this->container['subscriber_location'] = $subscriber_location;

        return $this;
    }

    /**
     * Gets total_duration
     * @return int
     */
    public function getTotalDuration()
    {
        return $this->container['total_duration'];
    }

    /**
     * Sets total_duration
     * @param int $total_duration the totalDuration
     * @return $this
     */
    public function setTotalDuration($total_duration)
    {
        $this->container['total_duration'] = $total_duration;

        return $this;
    }

    /**
     * Gets total_units
     * @return int
     */
    public function getTotalUnits()
    {
        return $this->container['total_units'];
    }

    /**
     * Sets total_units
     * @param int $total_units the totalUnits
     * @return $this
     */
    public function setTotalUnits($total_units)
    {
        $this->container['total_units'] = $total_units;

        return $this;
    }

    /**
     * Gets traffic_type
     * @return string
     */
    public function getTrafficType()
    {
        return $this->container['traffic_type'];
    }

    /**
     * Sets traffic_type
     * @param string $traffic_type the trafficType
     * @return $this
     */
    public function setTrafficType($traffic_type)
    {
        $this->container['traffic_type'] = $traffic_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


