<?php
/**
 * ActivatedBundleType
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * ActivatedBundleType Class Doc Comment
 *
 * @category    Class
 * @description A bundle that has been already activated by a subscriber. The activated bundle contains apart from the name and database id also a short status information including remaining units of the bundle, expiry date and if the bundle is periodic. A bundle might contain a list of mixed units (e.g. 100 minutes &amp; 50 sms)
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ActivatedBundleType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ActivatedBundleType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bundle_code' => 'string',
        'category' => '\iNew\Rest6_1\Model\Category',
        'default_periodic_charge' => '\iNew\Rest6_1\Model\Charge',
        'expired' => 'bool',
        'expiry_date' => '\DateTime',
        'group' => '\iNew\Rest6_1\Model\GroupType',
        'name' => 'string',
        'periodic' => 'bool',
        'periodic_charges' => '\iNew\Rest6_1\Model\Charge[]',
        'remaining_renewals' => 'int',
        'remaining_units' => '\iNew\Rest6_1\Model\UnitsType[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bundle_code' => 'bundleCode',
        'category' => 'category',
        'default_periodic_charge' => 'defaultPeriodicCharge',
        'expired' => 'expired',
        'expiry_date' => 'expiryDate',
        'group' => 'group',
        'name' => 'name',
        'periodic' => 'periodic',
        'periodic_charges' => 'periodicCharges',
        'remaining_renewals' => 'remainingRenewals',
        'remaining_units' => 'remainingUnits'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bundle_code' => 'setBundleCode',
        'category' => 'setCategory',
        'default_periodic_charge' => 'setDefaultPeriodicCharge',
        'expired' => 'setExpired',
        'expiry_date' => 'setExpiryDate',
        'group' => 'setGroup',
        'name' => 'setName',
        'periodic' => 'setPeriodic',
        'periodic_charges' => 'setPeriodicCharges',
        'remaining_renewals' => 'setRemainingRenewals',
        'remaining_units' => 'setRemainingUnits'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bundle_code' => 'getBundleCode',
        'category' => 'getCategory',
        'default_periodic_charge' => 'getDefaultPeriodicCharge',
        'expired' => 'getExpired',
        'expiry_date' => 'getExpiryDate',
        'group' => 'getGroup',
        'name' => 'getName',
        'periodic' => 'getPeriodic',
        'periodic_charges' => 'getPeriodicCharges',
        'remaining_renewals' => 'getRemainingRenewals',
        'remaining_units' => 'getRemainingUnits'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bundle_code'] = isset($data['bundle_code']) ? $data['bundle_code'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['default_periodic_charge'] = isset($data['default_periodic_charge']) ? $data['default_periodic_charge'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['periodic'] = isset($data['periodic']) ? $data['periodic'] : null;
        $this->container['periodic_charges'] = isset($data['periodic_charges']) ? $data['periodic_charges'] : null;
        $this->container['remaining_renewals'] = isset($data['remaining_renewals']) ? $data['remaining_renewals'] : null;
        $this->container['remaining_units'] = isset($data['remaining_units']) ? $data['remaining_units'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['bundle_code'] === null) {
            $invalid_properties[] = "'bundle_code' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        if ($this->container['default_periodic_charge'] === null) {
            $invalid_properties[] = "'default_periodic_charge' can't be null";
        }
        if ($this->container['expired'] === null) {
            $invalid_properties[] = "'expired' can't be null";
        }
        if ($this->container['expiry_date'] === null) {
            $invalid_properties[] = "'expiry_date' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalid_properties[] = "'group' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['periodic'] === null) {
            $invalid_properties[] = "'periodic' can't be null";
        }
        if ($this->container['periodic_charges'] === null) {
            $invalid_properties[] = "'periodic_charges' can't be null";
        }
        if ($this->container['remaining_renewals'] === null) {
            $invalid_properties[] = "'remaining_renewals' can't be null";
        }
        if ($this->container['remaining_units'] === null) {
            $invalid_properties[] = "'remaining_units' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['bundle_code'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        if ($this->container['default_periodic_charge'] === null) {
            return false;
        }
        if ($this->container['expired'] === null) {
            return false;
        }
        if ($this->container['expiry_date'] === null) {
            return false;
        }
        if ($this->container['group'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['periodic'] === null) {
            return false;
        }
        if ($this->container['periodic_charges'] === null) {
            return false;
        }
        if ($this->container['remaining_renewals'] === null) {
            return false;
        }
        if ($this->container['remaining_units'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bundle_code
     * @return string
     */
    public function getBundleCode()
    {
        return $this->container['bundle_code'];
    }

    /**
     * Sets bundle_code
     * @param string $bundle_code
     * @return $this
     */
    public function setBundleCode($bundle_code)
    {
        $this->container['bundle_code'] = $bundle_code;

        return $this;
    }

    /**
     * Gets category
     * @return \iNew\Rest6_1\Model\Category
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param \iNew\Rest6_1\Model\Category $category
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets default_periodic_charge
     * @return \iNew\Rest6_1\Model\Charge
     */
    public function getDefaultPeriodicCharge()
    {
        return $this->container['default_periodic_charge'];
    }

    /**
     * Sets default_periodic_charge
     * @param \iNew\Rest6_1\Model\Charge $default_periodic_charge the charge that will be tried to be charged first on the renewal
     * @return $this
     */
    public function setDefaultPeriodicCharge($default_periodic_charge)
    {
        $this->container['default_periodic_charge'] = $default_periodic_charge;

        return $this;
    }

    /**
     * Gets expired
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     * @param bool $expired
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets expiry_date
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     * @param \DateTime $expiry_date
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets group
     * @return \iNew\Rest6_1\Model\GroupType
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     * @param \iNew\Rest6_1\Model\GroupType $group
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets periodic
     * @return bool
     */
    public function getPeriodic()
    {
        return $this->container['periodic'];
    }

    /**
     * Sets periodic
     * @param bool $periodic
     * @return $this
     */
    public function setPeriodic($periodic)
    {
        $this->container['periodic'] = $periodic;

        return $this;
    }

    /**
     * Gets periodic_charges
     * @return \iNew\Rest6_1\Model\Charge[]
     */
    public function getPeriodicCharges()
    {
        return $this->container['periodic_charges'];
    }

    /**
     * Sets periodic_charges
     * @param \iNew\Rest6_1\Model\Charge[] $periodic_charges the charges that will be tried to be charged on the bundle renewal
     * @return $this
     */
    public function setPeriodicCharges($periodic_charges)
    {
        $this->container['periodic_charges'] = $periodic_charges;

        return $this;
    }

    /**
     * Gets remaining_renewals
     * @return int
     */
    public function getRemainingRenewals()
    {
        return $this->container['remaining_renewals'];
    }

    /**
     * Sets remaining_renewals
     * @param int $remaining_renewals
     * @return $this
     */
    public function setRemainingRenewals($remaining_renewals)
    {
        $this->container['remaining_renewals'] = $remaining_renewals;

        return $this;
    }

    /**
     * Gets remaining_units
     * @return \iNew\Rest6_1\Model\UnitsType[]
     */
    public function getRemainingUnits()
    {
        return $this->container['remaining_units'];
    }

    /**
     * Sets remaining_units
     * @param \iNew\Rest6_1\Model\UnitsType[] $remaining_units
     * @return $this
     */
    public function setRemainingUnits($remaining_units)
    {
        $this->container['remaining_units'] = $remaining_units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


