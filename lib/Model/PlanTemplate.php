<?php
/**
 * PlanTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * PlanTemplate Class Doc Comment
 *
 * @category    Class
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PlanTemplate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PlanTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'minimal_price' => '\iNew\Rest6_1\Model\Price',
        'name' => 'string',
        'plan_id' => 'int',
        'quota_combinations' => '\iNew\Rest6_1\Model\QuotaCombination[]',
        'renewal_period' => '\iNew\Rest6_1\Model\Period',
        'selectable_quotas' => '\iNew\Rest6_1\Model\SelectableQuota[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'minimal_price' => 'minimalPrice',
        'name' => 'name',
        'plan_id' => 'planId',
        'quota_combinations' => 'quotaCombinations',
        'renewal_period' => 'renewalPeriod',
        'selectable_quotas' => 'selectableQuotas'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'minimal_price' => 'setMinimalPrice',
        'name' => 'setName',
        'plan_id' => 'setPlanId',
        'quota_combinations' => 'setQuotaCombinations',
        'renewal_period' => 'setRenewalPeriod',
        'selectable_quotas' => 'setSelectableQuotas'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'minimal_price' => 'getMinimalPrice',
        'name' => 'getName',
        'plan_id' => 'getPlanId',
        'quota_combinations' => 'getQuotaCombinations',
        'renewal_period' => 'getRenewalPeriod',
        'selectable_quotas' => 'getSelectableQuotas'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['minimal_price'] = isset($data['minimal_price']) ? $data['minimal_price'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['quota_combinations'] = isset($data['quota_combinations']) ? $data['quota_combinations'] : null;
        $this->container['renewal_period'] = isset($data['renewal_period']) ? $data['renewal_period'] : null;
        $this->container['selectable_quotas'] = isset($data['selectable_quotas']) ? $data['selectable_quotas'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets minimal_price
     * @return \iNew\Rest6_1\Model\Price
     */
    public function getMinimalPrice()
    {
        return $this->container['minimal_price'];
    }

    /**
     * Sets minimal_price
     * @param \iNew\Rest6_1\Model\Price $minimal_price the minimalPrice
     * @return $this
     */
    public function setMinimalPrice($minimal_price)
    {
        $this->container['minimal_price'] = $minimal_price;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name the name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plan_id
     * @return int
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     * @param int $plan_id the planId
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets quota_combinations
     * @return \iNew\Rest6_1\Model\QuotaCombination[]
     */
    public function getQuotaCombinations()
    {
        return $this->container['quota_combinations'];
    }

    /**
     * Sets quota_combinations
     * @param \iNew\Rest6_1\Model\QuotaCombination[] $quota_combinations the quotaCombinations
     * @return $this
     */
    public function setQuotaCombinations($quota_combinations)
    {
        $this->container['quota_combinations'] = $quota_combinations;

        return $this;
    }

    /**
     * Gets renewal_period
     * @return \iNew\Rest6_1\Model\Period
     */
    public function getRenewalPeriod()
    {
        return $this->container['renewal_period'];
    }

    /**
     * Sets renewal_period
     * @param \iNew\Rest6_1\Model\Period $renewal_period the renewalPeriod
     * @return $this
     */
    public function setRenewalPeriod($renewal_period)
    {
        $this->container['renewal_period'] = $renewal_period;

        return $this;
    }

    /**
     * Gets selectable_quotas
     * @return \iNew\Rest6_1\Model\SelectableQuota[]
     */
    public function getSelectableQuotas()
    {
        return $this->container['selectable_quotas'];
    }

    /**
     * Sets selectable_quotas
     * @param \iNew\Rest6_1\Model\SelectableQuota[] $selectable_quotas the selectableQuota
     * @return $this
     */
    public function setSelectableQuotas($selectable_quotas)
    {
        $this->container['selectable_quotas'] = $selectable_quotas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


