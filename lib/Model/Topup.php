<?php
/**
 * Topup
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * Topup Class Doc Comment
 *
 * @category    Class
 * @description Encapsulates parameters to be in the response of topup operations
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Topup implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Topup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bonuses' => '\iNew\Rest6_1\Model\Account3[]',
        'recharged_account' => '\iNew\Rest6_1\Model\Account3',
        'transaction_date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bonuses' => 'bonuses',
        'recharged_account' => 'rechargedAccount',
        'transaction_date' => 'transactionDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bonuses' => 'setBonuses',
        'recharged_account' => 'setRechargedAccount',
        'transaction_date' => 'setTransactionDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bonuses' => 'getBonuses',
        'recharged_account' => 'getRechargedAccount',
        'transaction_date' => 'getTransactionDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bonuses'] = isset($data['bonuses']) ? $data['bonuses'] : null;
        $this->container['recharged_account'] = isset($data['recharged_account']) ? $data['recharged_account'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['recharged_account'] === null) {
            $invalid_properties[] = "'recharged_account' can't be null";
        }
        if ($this->container['transaction_date'] === null) {
            $invalid_properties[] = "'transaction_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['recharged_account'] === null) {
            return false;
        }
        if ($this->container['transaction_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bonuses
     * @return \iNew\Rest6_1\Model\Account3[]
     */
    public function getBonuses()
    {
        return $this->container['bonuses'];
    }

    /**
     * Sets bonuses
     * @param \iNew\Rest6_1\Model\Account3[] $bonuses list of bonus accounts given by the topup transaction or null in case no bonus was given
     * @return $this
     */
    public function setBonuses($bonuses)
    {
        $this->container['bonuses'] = $bonuses;

        return $this;
    }

    /**
     * Gets recharged_account
     * @return \iNew\Rest6_1\Model\Account3
     */
    public function getRechargedAccount()
    {
        return $this->container['recharged_account'];
    }

    /**
     * Sets recharged_account
     * @param \iNew\Rest6_1\Model\Account3 $recharged_account detailed information about account which was topped up during the transaction
     * @return $this
     */
    public function setRechargedAccount($recharged_account)
    {
        $this->container['recharged_account'] = $recharged_account;

        return $this;
    }

    /**
     * Gets transaction_date
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     * @param \DateTime $transaction_date date when topup was executed in the system
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


