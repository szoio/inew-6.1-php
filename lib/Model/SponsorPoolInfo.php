<?php
/**
 * SponsorPoolInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Model;

use \ArrayAccess;

/**
 * SponsorPoolInfo Class Doc Comment
 *
 * @category    Class
 * @description Basic information about sponsor pool for subscriber. Pool is created either manually or on shared plan/bundle activation by the owner and deleted either manually or on subscriber expiration. Only owner of the pool (subscriber with ADMIN role) can add or remove subscribers from the pool
 * @package     iNew\Rest6_1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SponsorPoolInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SponsorPoolInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_date' => '\DateTime',
        'id' => 'int',
        'owner' => '\iNew\Rest6_1\Model\PoolSubscriber',
        'sponsor' => '\iNew\Rest6_1\Model\PoolSubscriber',
        'subscribers' => '\iNew\Rest6_1\Model\PoolSubscriber[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_date' => 'creationDate',
        'id' => 'id',
        'owner' => 'owner',
        'sponsor' => 'sponsor',
        'subscribers' => 'subscribers'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'creation_date' => 'setCreationDate',
        'id' => 'setId',
        'owner' => 'setOwner',
        'sponsor' => 'setSponsor',
        'subscribers' => 'setSubscribers'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'creation_date' => 'getCreationDate',
        'id' => 'getId',
        'owner' => 'getOwner',
        'sponsor' => 'getSponsor',
        'subscribers' => 'getSubscribers'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['sponsor'] = isset($data['sponsor']) ? $data['sponsor'] : null;
        $this->container['subscribers'] = isset($data['subscribers']) ? $data['subscribers'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['creation_date'] === null) {
            $invalid_properties[] = "'creation_date' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalid_properties[] = "'owner' can't be null";
        }
        if ($this->container['sponsor'] === null) {
            $invalid_properties[] = "'sponsor' can't be null";
        }
        if ($this->container['subscribers'] === null) {
            $invalid_properties[] = "'subscribers' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['creation_date'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['owner'] === null) {
            return false;
        }
        if ($this->container['sponsor'] === null) {
            return false;
        }
        if ($this->container['subscribers'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets creation_date
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param \DateTime $creation_date the date when pool was created (when owner of the pool activated a shared plan)
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id the id of the subscriber's pool
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner
     * @return \iNew\Rest6_1\Model\PoolSubscriber
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \iNew\Rest6_1\Model\PoolSubscriber $owner the owner subscriber of the pool which can manipulate the pool subscribers
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets sponsor
     * @return \iNew\Rest6_1\Model\PoolSubscriber
     */
    public function getSponsor()
    {
        return $this->container['sponsor'];
    }

    /**
     * Sets sponsor
     * @param \iNew\Rest6_1\Model\PoolSubscriber $sponsor the sponsor of this pool, null if this sponsor is actually the owner
     * @return $this
     */
    public function setSponsor($sponsor)
    {
        $this->container['sponsor'] = $sponsor;

        return $this;
    }

    /**
     * Gets subscribers
     * @return \iNew\Rest6_1\Model\PoolSubscriber[]
     */
    public function getSubscribers()
    {
        return $this->container['subscribers'];
    }

    /**
     * Sets subscribers
     * @param \iNew\Rest6_1\Model\PoolSubscriber[] $subscribers the list of subscribers belonging to the pool
     * @return $this
     */
    public function setSubscribers($subscribers)
    {
        $this->container['subscribers'] = $subscribers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\iNew\Rest6_1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


