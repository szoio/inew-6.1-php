<?php
/**
 * RetailerApi
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Api;

use \iNew\Rest6_1\ApiClient;
use \iNew\Rest6_1\ApiException;
use \iNew\Rest6_1\Configuration;
use \iNew\Rest6_1\ObjectSerializer;

/**
 * RetailerApi Class Doc Comment
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RetailerApi
{
    /**
     * API Client
     *
     * @var \iNew\Rest6_1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \iNew\Rest6_1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\iNew\Rest6_1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \iNew\Rest6_1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \iNew\Rest6_1\ApiClient $apiClient set the API client
     *
     * @return RetailerApi
     */
    public function setApiClient(\iNew\Rest6_1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation rtmRetailManagerActivateBundle
     *
     * activates the given bundle
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $bundle_code the product ID of the bundle/plan that should be activated (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\ChargeResponse
     */
    public function rtmRetailManagerActivateBundle($msisdn, $bundle_code, $correlation_id = null, $transaction_id = null, $user = null, $pos_id = null, $sub_retailer_id = null)
    {
        list($response) = $this->rtmRetailManagerActivateBundleWithHttpInfo($msisdn, $bundle_code, $correlation_id, $transaction_id, $user, $pos_id, $sub_retailer_id);
        return $response;
    }

    /**
     * Operation rtmRetailManagerActivateBundleWithHttpInfo
     *
     * activates the given bundle
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $bundle_code the product ID of the bundle/plan that should be activated (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\ChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function rtmRetailManagerActivateBundleWithHttpInfo($msisdn, $bundle_code, $correlation_id = null, $transaction_id = null, $user = null, $pos_id = null, $sub_retailer_id = null)
    {
        // verify the required parameter 'msisdn' is set
        if ($msisdn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $msisdn when calling rtmRetailManagerActivateBundle');
        }
        // verify the required parameter 'bundle_code' is set
        if ($bundle_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_code when calling rtmRetailManagerActivateBundle');
        }
        // parse inputs
        $resourcePath = "/retailer/{msisdn}/availableBundles/{bundleCode}/activate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($pos_id !== null) {
            $queryParams['posId'] = $this->apiClient->getSerializer()->toQueryValue($pos_id);
        }
        // query params
        if ($sub_retailer_id !== null) {
            $queryParams['subRetailerId'] = $this->apiClient->getSerializer()->toQueryValue($sub_retailer_id);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($msisdn !== null) {
            $resourcePath = str_replace(
                "{" . "msisdn" . "}",
                $this->apiClient->getSerializer()->toPathValue($msisdn),
                $resourcePath
            );
        }
        // path params
        if ($bundle_code !== null) {
            $resourcePath = str_replace(
                "{" . "bundleCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\ChargeResponse',
                '/retailer/{msisdn}/availableBundles/{bundleCode}/activate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\ChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\ChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rtmRetailManagerActivatePlan
     *
     * activates the given plan
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $tariff_plan_id the product ID of the bundle/plan that should be activated (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\ChargeResponse
     */
    public function rtmRetailManagerActivatePlan($msisdn, $tariff_plan_id, $correlation_id = null, $transaction_id = null, $user = null, $pos_id = null, $sub_retailer_id = null)
    {
        list($response) = $this->rtmRetailManagerActivatePlanWithHttpInfo($msisdn, $tariff_plan_id, $correlation_id, $transaction_id, $user, $pos_id, $sub_retailer_id);
        return $response;
    }

    /**
     * Operation rtmRetailManagerActivatePlanWithHttpInfo
     *
     * activates the given plan
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $tariff_plan_id the product ID of the bundle/plan that should be activated (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\ChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function rtmRetailManagerActivatePlanWithHttpInfo($msisdn, $tariff_plan_id, $correlation_id = null, $transaction_id = null, $user = null, $pos_id = null, $sub_retailer_id = null)
    {
        // verify the required parameter 'msisdn' is set
        if ($msisdn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $msisdn when calling rtmRetailManagerActivatePlan');
        }
        // verify the required parameter 'tariff_plan_id' is set
        if ($tariff_plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tariff_plan_id when calling rtmRetailManagerActivatePlan');
        }
        // parse inputs
        $resourcePath = "/retailer/{msisdn}/availablePlans/{tariffPlanId}/activate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($pos_id !== null) {
            $queryParams['posId'] = $this->apiClient->getSerializer()->toQueryValue($pos_id);
        }
        // query params
        if ($sub_retailer_id !== null) {
            $queryParams['subRetailerId'] = $this->apiClient->getSerializer()->toQueryValue($sub_retailer_id);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($msisdn !== null) {
            $resourcePath = str_replace(
                "{" . "msisdn" . "}",
                $this->apiClient->getSerializer()->toPathValue($msisdn),
                $resourcePath
            );
        }
        // path params
        if ($tariff_plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "tariffPlanId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tariff_plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\ChargeResponse',
                '/retailer/{msisdn}/availablePlans/{tariffPlanId}/activate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\ChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\ChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rtmRetailManagerGetAvailableBundles
     *
     * returns the available bundles
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param string $group_code the group code, if provided the result of this request will be filtered to only show bundles for the provided group code (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetAvailableBundlesResponse1
     */
    public function rtmRetailManagerGetAvailableBundles($msisdn, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $group_code = null, $page = null, $pos_id = null, $sub_retailer_id = null)
    {
        list($response) = $this->rtmRetailManagerGetAvailableBundlesWithHttpInfo($msisdn, $correlation_id, $transaction_id, $user, $entities_per_page, $group_code, $page, $pos_id, $sub_retailer_id);
        return $response;
    }

    /**
     * Operation rtmRetailManagerGetAvailableBundlesWithHttpInfo
     *
     * returns the available bundles
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param string $group_code the group code, if provided the result of this request will be filtered to only show bundles for the provided group code (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetAvailableBundlesResponse1, HTTP status code, HTTP response headers (array of strings)
     */
    public function rtmRetailManagerGetAvailableBundlesWithHttpInfo($msisdn, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $group_code = null, $page = null, $pos_id = null, $sub_retailer_id = null)
    {
        // verify the required parameter 'msisdn' is set
        if ($msisdn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $msisdn when calling rtmRetailManagerGetAvailableBundles');
        }
        // parse inputs
        $resourcePath = "/retailer/{msisdn}/availableBundles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($entities_per_page !== null) {
            $queryParams['entitiesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entities_per_page);
        }
        // query params
        if ($group_code !== null) {
            $queryParams['groupCode'] = $this->apiClient->getSerializer()->toQueryValue($group_code);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($pos_id !== null) {
            $queryParams['posId'] = $this->apiClient->getSerializer()->toQueryValue($pos_id);
        }
        // query params
        if ($sub_retailer_id !== null) {
            $queryParams['subRetailerId'] = $this->apiClient->getSerializer()->toQueryValue($sub_retailer_id);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($msisdn !== null) {
            $resourcePath = str_replace(
                "{" . "msisdn" . "}",
                $this->apiClient->getSerializer()->toPathValue($msisdn),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetAvailableBundlesResponse1',
                '/retailer/{msisdn}/availableBundles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetAvailableBundlesResponse1', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetAvailableBundlesResponse1', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rtmRetailManagerGetAvailablePlans
     *
     * returns the available plans
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param bool $show_shared_plans a boolean indicating if shared plans (Add-On: Resource Pooling) should be contained in the result (default value is true, if Add-On: Resource Pooling is enabled or false otherwise) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetAvailablePlansResponse
     */
    public function rtmRetailManagerGetAvailablePlans($msisdn, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $page = null, $pos_id = null, $show_shared_plans = null, $sub_retailer_id = null)
    {
        list($response) = $this->rtmRetailManagerGetAvailablePlansWithHttpInfo($msisdn, $correlation_id, $transaction_id, $user, $entities_per_page, $page, $pos_id, $show_shared_plans, $sub_retailer_id);
        return $response;
    }

    /**
     * Operation rtmRetailManagerGetAvailablePlansWithHttpInfo
     *
     * returns the available plans
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param bool $show_shared_plans a boolean indicating if shared plans (Add-On: Resource Pooling) should be contained in the result (default value is true, if Add-On: Resource Pooling is enabled or false otherwise) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetAvailablePlansResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function rtmRetailManagerGetAvailablePlansWithHttpInfo($msisdn, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $page = null, $pos_id = null, $show_shared_plans = null, $sub_retailer_id = null)
    {
        // verify the required parameter 'msisdn' is set
        if ($msisdn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $msisdn when calling rtmRetailManagerGetAvailablePlans');
        }
        // parse inputs
        $resourcePath = "/retailer/{msisdn}/availablePlans";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($entities_per_page !== null) {
            $queryParams['entitiesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entities_per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($pos_id !== null) {
            $queryParams['posId'] = $this->apiClient->getSerializer()->toQueryValue($pos_id);
        }
        // query params
        if ($show_shared_plans !== null) {
            $queryParams['showSharedPlans'] = $this->apiClient->getSerializer()->toQueryValue($show_shared_plans);
        }
        // query params
        if ($sub_retailer_id !== null) {
            $queryParams['subRetailerId'] = $this->apiClient->getSerializer()->toQueryValue($sub_retailer_id);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($msisdn !== null) {
            $resourcePath = str_replace(
                "{" . "msisdn" . "}",
                $this->apiClient->getSerializer()->toPathValue($msisdn),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetAvailablePlansResponse',
                '/retailer/{msisdn}/availablePlans'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetAvailablePlansResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetAvailablePlansResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rtmRetailManagerTopup
     *
     * makes a topup with the given amount
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param \iNew\Rest6_1\Model\AmountCreate $amount the amount used for the topup (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\ChargeResponse
     */
    public function rtmRetailManagerTopup($msisdn, $amount, $correlation_id = null, $transaction_id = null, $user = null, $pos_id = null, $sub_retailer_id = null)
    {
        list($response) = $this->rtmRetailManagerTopupWithHttpInfo($msisdn, $amount, $correlation_id, $transaction_id, $user, $pos_id, $sub_retailer_id);
        return $response;
    }

    /**
     * Operation rtmRetailManagerTopupWithHttpInfo
     *
     * makes a topup with the given amount
     *
     * @param string $msisdn The phone number of the subscriber (required)
     * @param \iNew\Rest6_1\Model\AmountCreate $amount the amount used for the topup (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param string $pos_id the the ID identifying the point of sale e.g. a specific terminal, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @param string $sub_retailer_id the ID identifying the sub retailer e.g. a subsidiary company, can be used to track whoever authorized the transaction in more detail (the retailer ID will definitely be part of the transaction since it is encoded in the access key) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\ChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function rtmRetailManagerTopupWithHttpInfo($msisdn, $amount, $correlation_id = null, $transaction_id = null, $user = null, $pos_id = null, $sub_retailer_id = null)
    {
        // verify the required parameter 'msisdn' is set
        if ($msisdn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $msisdn when calling rtmRetailManagerTopup');
        }
        // verify the required parameter 'amount' is set
        if ($amount === null) {
            throw new \InvalidArgumentException('Missing the required parameter $amount when calling rtmRetailManagerTopup');
        }
        // parse inputs
        $resourcePath = "/retailer/{msisdn}/topup";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($pos_id !== null) {
            $queryParams['posId'] = $this->apiClient->getSerializer()->toQueryValue($pos_id);
        }
        // query params
        if ($sub_retailer_id !== null) {
            $queryParams['subRetailerId'] = $this->apiClient->getSerializer()->toQueryValue($sub_retailer_id);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($msisdn !== null) {
            $resourcePath = str_replace(
                "{" . "msisdn" . "}",
                $this->apiClient->getSerializer()->toPathValue($msisdn),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($amount)) {
            $_tempBody = $amount;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\ChargeResponse',
                '/retailer/{msisdn}/topup'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\ChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\ChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
