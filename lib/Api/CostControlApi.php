<?php
/**
 * CostControlApi
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Api;

use \iNew\Rest6_1\ApiClient;
use \iNew\Rest6_1\ApiException;
use \iNew\Rest6_1\Configuration;
use \iNew\Rest6_1\ObjectSerializer;

/**
 * CostControlApi Class Doc Comment
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CostControlApi
{
    /**
     * API Client
     *
     * @var \iNew\Rest6_1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \iNew\Rest6_1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\iNew\Rest6_1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \iNew\Rest6_1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \iNew\Rest6_1\ApiClient $apiClient set the API client
     *
     * @return CostControlApi
     */
    public function setApiClient(\iNew\Rest6_1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation crceCostControlDisableCostLimit
     *
     * disables cost control for the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\DisableCostLimitResponse
     */
    public function crceCostControlDisableCostLimit($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlDisableCostLimitWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlDisableCostLimitWithHttpInfo
     *
     * disables cost control for the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\DisableCostLimitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlDisableCostLimitWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceCostControlDisableCostLimit');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlDisableCostLimit');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlDisableCostLimit');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlDisableCostLimit');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/disable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\DisableCostLimitResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/disable'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\DisableCostLimitResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\DisableCostLimitResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlDisableCostLimitSubscription
     *
     * disables cost control for the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\DisableCostLimitResponse
     */
    public function crceCostControlDisableCostLimitSubscription($subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlDisableCostLimitSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlDisableCostLimitSubscriptionWithHttpInfo
     *
     * disables cost control for the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\DisableCostLimitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlDisableCostLimitSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlDisableCostLimitSubscription');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlDisableCostLimitSubscription');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlDisableCostLimitSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/disable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\DisableCostLimitResponse',
                '/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/disable'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\DisableCostLimitResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\DisableCostLimitResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlGetCostLimitStatus
     *
     * retrieves the cost control limit status for the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetCostLimitStatusResponse
     */
    public function crceCostControlGetCostLimitStatus($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlGetCostLimitStatusWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlGetCostLimitStatusWithHttpInfo
     *
     * retrieves the cost control limit status for the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetCostLimitStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlGetCostLimitStatusWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceCostControlGetCostLimitStatus');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlGetCostLimitStatus');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlGetCostLimitStatus');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlGetCostLimitStatus');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetCostLimitStatusResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetCostLimitStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetCostLimitStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlGetCostLimitStatusSubscription
     *
     * retrieves the cost control limit status for the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetCostLimitStatusResponse
     */
    public function crceCostControlGetCostLimitStatusSubscription($subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlGetCostLimitStatusSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlGetCostLimitStatusSubscriptionWithHttpInfo
     *
     * retrieves the cost control limit status for the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetCostLimitStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlGetCostLimitStatusSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlGetCostLimitStatusSubscription');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlGetCostLimitStatusSubscription');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlGetCostLimitStatusSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetCostLimitStatusResponse',
                '/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetCostLimitStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetCostLimitStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlGetCostLimits
     *
     * retrieves the cost control limits for the given subscription
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetCostLimitsResponse
     */
    public function crceCostControlGetCostLimits($customer_account_id, $subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $page = null)
    {
        list($response) = $this->crceCostControlGetCostLimitsWithHttpInfo($customer_account_id, $subscription_id, $correlation_id, $transaction_id, $user, $entities_per_page, $page);
        return $response;
    }

    /**
     * Operation crceCostControlGetCostLimitsWithHttpInfo
     *
     * retrieves the cost control limits for the given subscription
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetCostLimitsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlGetCostLimitsWithHttpInfo($customer_account_id, $subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $page = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceCostControlGetCostLimits');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlGetCostLimits');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControlLimits";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($entities_per_page !== null) {
            $queryParams['entitiesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entities_per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetCostLimitsResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControlLimits'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetCostLimitsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetCostLimitsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlGetCostLimitsSubscription
     *
     * retrieves the cost control limits for the given subscription
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetCostLimitsResponse
     */
    public function crceCostControlGetCostLimitsSubscription($subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $page = null)
    {
        list($response) = $this->crceCostControlGetCostLimitsSubscriptionWithHttpInfo($subscription_id, $correlation_id, $transaction_id, $user, $entities_per_page, $page);
        return $response;
    }

    /**
     * Operation crceCostControlGetCostLimitsSubscriptionWithHttpInfo
     *
     * retrieves the cost control limits for the given subscription
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetCostLimitsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlGetCostLimitsSubscriptionWithHttpInfo($subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $entities_per_page = null, $page = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlGetCostLimitsSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/costControlLimits";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($entities_per_page !== null) {
            $queryParams['entitiesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entities_per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetCostLimitsResponse',
                '/subscriptions/{subscriptionId}/costControlLimits'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetCostLimitsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetCostLimitsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlRestoreDefaultCostLimit
     *
     * restores the default provider cost control for the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse
     */
    public function crceCostControlRestoreDefaultCostLimit($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlRestoreDefaultCostLimitWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlRestoreDefaultCostLimitWithHttpInfo
     *
     * restores the default provider cost control for the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlRestoreDefaultCostLimitWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceCostControlRestoreDefaultCostLimit');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlRestoreDefaultCostLimit');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlRestoreDefaultCostLimit');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlRestoreDefaultCostLimit');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/restoreProviderDefault";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/restoreProviderDefault'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlRestoreDefaultCostLimitSubscription
     *
     * restores the default provider cost control for the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse
     */
    public function crceCostControlRestoreDefaultCostLimitSubscription($subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlRestoreDefaultCostLimitSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlRestoreDefaultCostLimitSubscriptionWithHttpInfo
     *
     * restores the default provider cost control for the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlRestoreDefaultCostLimitSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlRestoreDefaultCostLimitSubscription');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlRestoreDefaultCostLimitSubscription');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlRestoreDefaultCostLimitSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/restoreProviderDefault";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse',
                '/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/restoreProviderDefault'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestoreDefaultCostLimitResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlUpdateCostLimit
     *
     * updates the cost control limit with the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $max_units limit in smallest units of main currency which subscription cannot exceed for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\UpdateCostLimitResponse
     */
    public function crceCostControlUpdateCostLimit($customer_account_id, $subscription_id, $traffic_type, $zone, $max_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlUpdateCostLimitWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $max_units, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlUpdateCostLimitWithHttpInfo
     *
     * updates the cost control limit with the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $max_units limit in smallest units of main currency which subscription cannot exceed for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\UpdateCostLimitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlUpdateCostLimitWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $max_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceCostControlUpdateCostLimit');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlUpdateCostLimit');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlUpdateCostLimit');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlUpdateCostLimit');
        }
        // verify the required parameter 'max_units' is set
        if ($max_units === null) {
            throw new \InvalidArgumentException('Missing the required parameter $max_units when calling crceCostControlUpdateCostLimit');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/limit/{maxUnits}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // path params
        if ($max_units !== null) {
            $resourcePath = str_replace(
                "{" . "maxUnits" . "}",
                $this->apiClient->getSerializer()->toPathValue($max_units),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\UpdateCostLimitResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/limit/{maxUnits}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\UpdateCostLimitResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\UpdateCostLimitResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlUpdateCostLimitStatus
     *
     * updates the cost control used units with the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $used_units the used units in smallest unit of main currency which the subscription already used for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\UpdateCostLimitStatusResponse
     */
    public function crceCostControlUpdateCostLimitStatus($customer_account_id, $subscription_id, $traffic_type, $zone, $used_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlUpdateCostLimitStatusWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $used_units, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlUpdateCostLimitStatusWithHttpInfo
     *
     * updates the cost control used units with the given parameters
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $used_units the used units in smallest unit of main currency which the subscription already used for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\UpdateCostLimitStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlUpdateCostLimitStatusWithHttpInfo($customer_account_id, $subscription_id, $traffic_type, $zone, $used_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceCostControlUpdateCostLimitStatus');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlUpdateCostLimitStatus');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlUpdateCostLimitStatus');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlUpdateCostLimitStatus');
        }
        // verify the required parameter 'used_units' is set
        if ($used_units === null) {
            throw new \InvalidArgumentException('Missing the required parameter $used_units when calling crceCostControlUpdateCostLimitStatus');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/used/{usedUnits}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // path params
        if ($used_units !== null) {
            $resourcePath = str_replace(
                "{" . "usedUnits" . "}",
                $this->apiClient->getSerializer()->toPathValue($used_units),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\UpdateCostLimitStatusResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/used/{usedUnits}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\UpdateCostLimitStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\UpdateCostLimitStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlUpdateCostLimitStatusSubscription
     *
     * updates the cost control used units with the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $used_units the used units in smallest unit of main currency which the subscription already used for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\UpdateCostLimitStatusResponse
     */
    public function crceCostControlUpdateCostLimitStatusSubscription($subscription_id, $traffic_type, $zone, $used_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlUpdateCostLimitStatusSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $used_units, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlUpdateCostLimitStatusSubscriptionWithHttpInfo
     *
     * updates the cost control used units with the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $used_units the used units in smallest unit of main currency which the subscription already used for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\UpdateCostLimitStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlUpdateCostLimitStatusSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $used_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlUpdateCostLimitStatusSubscription');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlUpdateCostLimitStatusSubscription');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlUpdateCostLimitStatusSubscription');
        }
        // verify the required parameter 'used_units' is set
        if ($used_units === null) {
            throw new \InvalidArgumentException('Missing the required parameter $used_units when calling crceCostControlUpdateCostLimitStatusSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/used/{usedUnits}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // path params
        if ($used_units !== null) {
            $resourcePath = str_replace(
                "{" . "usedUnits" . "}",
                $this->apiClient->getSerializer()->toPathValue($used_units),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\UpdateCostLimitStatusResponse',
                '/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/used/{usedUnits}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\UpdateCostLimitStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\UpdateCostLimitStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceCostControlUpdateCostLimitSubscription
     *
     * updates the cost control limit with the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $max_units limit in smallest units of main currency which subscription cannot exceed for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\UpdateCostLimitResponse
     */
    public function crceCostControlUpdateCostLimitSubscription($subscription_id, $traffic_type, $zone, $max_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceCostControlUpdateCostLimitSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $max_units, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceCostControlUpdateCostLimitSubscriptionWithHttpInfo
     *
     * updates the cost control limit with the given parameters
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $traffic_type the trafficType for the cost control limitation (required)
     * @param string $zone the zone for cost control limitation (required)
     * @param int $max_units limit in smallest units of main currency which subscription cannot exceed for the traffic and zone types (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\UpdateCostLimitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceCostControlUpdateCostLimitSubscriptionWithHttpInfo($subscription_id, $traffic_type, $zone, $max_units, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceCostControlUpdateCostLimitSubscription');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceCostControlUpdateCostLimitSubscription');
        }
        // verify the required parameter 'zone' is set
        if ($zone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone when calling crceCostControlUpdateCostLimitSubscription');
        }
        // verify the required parameter 'max_units' is set
        if ($max_units === null) {
            throw new \InvalidArgumentException('Missing the required parameter $max_units when calling crceCostControlUpdateCostLimitSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/limit/{maxUnits}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($traffic_type !== null) {
            $resourcePath = str_replace(
                "{" . "trafficType" . "}",
                $this->apiClient->getSerializer()->toPathValue($traffic_type),
                $resourcePath
            );
        }
        // path params
        if ($zone !== null) {
            $resourcePath = str_replace(
                "{" . "zone" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone),
                $resourcePath
            );
        }
        // path params
        if ($max_units !== null) {
            $resourcePath = str_replace(
                "{" . "maxUnits" . "}",
                $this->apiClient->getSerializer()->toPathValue($max_units),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\UpdateCostLimitResponse',
                '/subscriptions/{subscriptionId}/costControl/{trafficType}/{zone}/limit/{maxUnits}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\UpdateCostLimitResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\UpdateCostLimitResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
