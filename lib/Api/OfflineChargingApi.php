<?php
/**
 * OfflineChargingApi
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Api;

use \iNew\Rest6_1\ApiClient;
use \iNew\Rest6_1\ApiException;
use \iNew\Rest6_1\Configuration;
use \iNew\Rest6_1\ObjectSerializer;

/**
 * OfflineChargingApi Class Doc Comment
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfflineChargingApi
{
    /**
     * API Client
     *
     * @var \iNew\Rest6_1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \iNew\Rest6_1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\iNew\Rest6_1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \iNew\Rest6_1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \iNew\Rest6_1\ApiClient $apiClient set the API client
     *
     * @return OfflineChargingApi
     */
    public function setApiClient(\iNew\Rest6_1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation crceOfflineChargingChargeAdminEvent
     *
     * Method designed for charging various types of admin events, such as USSD, IVR actions or CRM commands
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\AdminEventChargingParameters $charging_parameters Admin Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\AdminEventChargeResponse
     */
    public function crceOfflineChargingChargeAdminEvent($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeAdminEventWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeAdminEventWithHttpInfo
     *
     * Method designed for charging various types of admin events, such as USSD, IVR actions or CRM commands
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\AdminEventChargingParameters $charging_parameters Admin Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\AdminEventChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeAdminEventWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineChargingChargeAdminEvent');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeAdminEvent');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeAdminEvent');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/adminEvent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\AdminEventChargeResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/adminEvent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\AdminEventChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\AdminEventChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingChargeAdminEventSubscription
     *
     * Method designed for charging various types of admin events, such as USSD, IVR actions or CRM commands
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\AdminEventChargingParameters $charging_parameters Admin Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\AdminEventChargeResponse
     */
    public function crceOfflineChargingChargeAdminEventSubscription($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeAdminEventSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeAdminEventSubscriptionWithHttpInfo
     *
     * Method designed for charging various types of admin events, such as USSD, IVR actions or CRM commands
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\AdminEventChargingParameters $charging_parameters Admin Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\AdminEventChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeAdminEventSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeAdminEventSubscription');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeAdminEventSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline/adminEvent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\AdminEventChargeResponse',
                '/subscriptions/{subscriptionId}/charge/offline/adminEvent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\AdminEventChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\AdminEventChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingChargeData
     *
     * Method designed for charging the data sessions
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\DataChargingParameters $charging_parameters Data Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\DataChargeResponse
     */
    public function crceOfflineChargingChargeData($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeDataWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeDataWithHttpInfo
     *
     * Method designed for charging the data sessions
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\DataChargingParameters $charging_parameters Data Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\DataChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeDataWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineChargingChargeData');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeData');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeData');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/data";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\DataChargeResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\DataChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\DataChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingChargeDataSubscription
     *
     * Method designed for charging the data sessions
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\DataChargingParameters $charging_parameters Data Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\DataChargeResponse
     */
    public function crceOfflineChargingChargeDataSubscription($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeDataSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeDataSubscriptionWithHttpInfo
     *
     * Method designed for charging the data sessions
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\DataChargingParameters $charging_parameters Data Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\DataChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeDataSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeDataSubscription');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeDataSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline/data";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\DataChargeResponse',
                '/subscriptions/{subscriptionId}/charge/offline/data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\DataChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\DataChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingChargeEvent
     *
     * Method designed for charging the SMS services
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\EventChargingParameters $charging_parameters Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\EventChargeResponse
     */
    public function crceOfflineChargingChargeEvent($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeEventWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeEventWithHttpInfo
     *
     * Method designed for charging the SMS services
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\EventChargingParameters $charging_parameters Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\EventChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeEventWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineChargingChargeEvent');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeEvent');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeEvent');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/event";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\EventChargeResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/event'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\EventChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\EventChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingChargeEventSubscription
     *
     * Method designed for charging the SMS services
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\EventChargingParameters $charging_parameters Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\EventChargeResponse
     */
    public function crceOfflineChargingChargeEventSubscription($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeEventSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeEventSubscriptionWithHttpInfo
     *
     * Method designed for charging the SMS services
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\EventChargingParameters $charging_parameters Event Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\EventChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeEventSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeEventSubscription');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeEventSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline/event";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\EventChargeResponse',
                '/subscriptions/{subscriptionId}/charge/offline/event'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\EventChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\EventChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingChargeSession
     *
     * Method designed for charging the MOC, MTC and MFC sessions
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\SessionChargingParameters $charging_parameters Session Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\SessionChargeResponse
     */
    public function crceOfflineChargingChargeSession($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeSessionWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeSessionWithHttpInfo
     *
     * Method designed for charging the MOC, MTC and MFC sessions
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\SessionChargingParameters $charging_parameters Session Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\SessionChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeSessionWithHttpInfo($customer_account_id, $subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineChargingChargeSession');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeSession');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeSession');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/session";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\SessionChargeResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/session'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\SessionChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\SessionChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingChargeSessionSubscription
     *
     * Method designed for charging the MOC, MTC and MFC sessions
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\SessionChargingParameters $charging_parameters Session Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\SessionChargeResponse
     */
    public function crceOfflineChargingChargeSessionSubscription($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingChargeSessionSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingChargeSessionSubscriptionWithHttpInfo
     *
     * Method designed for charging the MOC, MTC and MFC sessions
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\SessionChargingParameters $charging_parameters Session Charging Parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\SessionChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingChargeSessionSubscriptionWithHttpInfo($subscription_id, $charging_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingChargeSessionSubscription');
        }
        // verify the required parameter 'charging_parameters' is set
        if ($charging_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charging_parameters when calling crceOfflineChargingChargeSessionSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline/session";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($charging_parameters)) {
            $_tempBody = $charging_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\SessionChargeResponse',
                '/subscriptions/{subscriptionId}/charge/offline/session'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\SessionChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\SessionChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingOfflineCharge
     *
     * performs offline charging
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\OfflineChargeParametersCharge $offline_charge_parameters offline charge parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\OfflineChargeResponse
     */
    public function crceOfflineChargingOfflineCharge($customer_account_id, $subscription_id, $offline_charge_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingOfflineChargeWithHttpInfo($customer_account_id, $subscription_id, $offline_charge_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingOfflineChargeWithHttpInfo
     *
     * performs offline charging
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\OfflineChargeParametersCharge $offline_charge_parameters offline charge parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\OfflineChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingOfflineChargeWithHttpInfo($customer_account_id, $subscription_id, $offline_charge_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineChargingOfflineCharge');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingOfflineCharge');
        }
        // verify the required parameter 'offline_charge_parameters' is set
        if ($offline_charge_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offline_charge_parameters when calling crceOfflineChargingOfflineCharge');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($offline_charge_parameters)) {
            $_tempBody = $offline_charge_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\OfflineChargeResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\OfflineChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\OfflineChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineChargingOfflineChargeSubscription
     *
     * performs offline charging
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\OfflineChargeParametersCharge $offline_charge_parameters offline charge parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\OfflineChargeResponse
     */
    public function crceOfflineChargingOfflineChargeSubscription($subscription_id, $offline_charge_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineChargingOfflineChargeSubscriptionWithHttpInfo($subscription_id, $offline_charge_parameters, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineChargingOfflineChargeSubscriptionWithHttpInfo
     *
     * performs offline charging
     *
     * @param int $subscription_id the subscription id (required)
     * @param \iNew\Rest6_1\Model\OfflineChargeParametersCharge $offline_charge_parameters offline charge parameters (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\OfflineChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineChargingOfflineChargeSubscriptionWithHttpInfo($subscription_id, $offline_charge_parameters, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineChargingOfflineChargeSubscription');
        }
        // verify the required parameter 'offline_charge_parameters' is set
        if ($offline_charge_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offline_charge_parameters when calling crceOfflineChargingOfflineChargeSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($offline_charge_parameters)) {
            $_tempBody = $offline_charge_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\OfflineChargeResponse',
                '/subscriptions/{subscriptionId}/charge/offline'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\OfflineChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\OfflineChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetDataRating
     *
     * gets the rating information for data sessions
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param int $accumulated_data the accumulatedData (required)
     * @param string $bearer_type the bearerType (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param int $rating_group the ratingGroup (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetDataRatingResponse
     */
    public function crceOfflineRatingGetDataRating($customer_account_id, $subscription_id, $accumulated_data, $bearer_type, $duration, $location, $rating_group, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetDataRatingWithHttpInfo($customer_account_id, $subscription_id, $accumulated_data, $bearer_type, $duration, $location, $rating_group, $roaming, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetDataRatingWithHttpInfo
     *
     * gets the rating information for data sessions
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param int $accumulated_data the accumulatedData (required)
     * @param string $bearer_type the bearerType (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param int $rating_group the ratingGroup (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetDataRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetDataRatingWithHttpInfo($customer_account_id, $subscription_id, $accumulated_data, $bearer_type, $duration, $location, $rating_group, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineRatingGetDataRating');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetDataRating');
        }
        // verify the required parameter 'accumulated_data' is set
        if ($accumulated_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accumulated_data when calling crceOfflineRatingGetDataRating');
        }
        // verify the required parameter 'bearer_type' is set
        if ($bearer_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bearer_type when calling crceOfflineRatingGetDataRating');
        }
        // verify the required parameter 'duration' is set
        if ($duration === null) {
            throw new \InvalidArgumentException('Missing the required parameter $duration when calling crceOfflineRatingGetDataRating');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetDataRating');
        }
        // verify the required parameter 'rating_group' is set
        if ($rating_group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rating_group when calling crceOfflineRatingGetDataRating');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetDataRating');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/data";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($accumulated_data !== null) {
            $queryParams['accumulatedData'] = $this->apiClient->getSerializer()->toQueryValue($accumulated_data);
        }
        // query params
        if ($bearer_type !== null) {
            $queryParams['bearerType'] = $this->apiClient->getSerializer()->toQueryValue($bearer_type);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($rating_group !== null) {
            $queryParams['ratingGroup'] = $this->apiClient->getSerializer()->toQueryValue($rating_group);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetDataRatingResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetDataRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetDataRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetDataRatingSubscription
     *
     * gets the rating information for data sessions
     *
     * @param int $subscription_id the subscription id (required)
     * @param int $accumulated_data the accumulatedData (required)
     * @param string $bearer_type the bearerType (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param int $rating_group the ratingGroup (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetDataRatingResponse
     */
    public function crceOfflineRatingGetDataRatingSubscription($subscription_id, $accumulated_data, $bearer_type, $duration, $location, $rating_group, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetDataRatingSubscriptionWithHttpInfo($subscription_id, $accumulated_data, $bearer_type, $duration, $location, $rating_group, $roaming, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetDataRatingSubscriptionWithHttpInfo
     *
     * gets the rating information for data sessions
     *
     * @param int $subscription_id the subscription id (required)
     * @param int $accumulated_data the accumulatedData (required)
     * @param string $bearer_type the bearerType (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param int $rating_group the ratingGroup (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetDataRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetDataRatingSubscriptionWithHttpInfo($subscription_id, $accumulated_data, $bearer_type, $duration, $location, $rating_group, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetDataRatingSubscription');
        }
        // verify the required parameter 'accumulated_data' is set
        if ($accumulated_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accumulated_data when calling crceOfflineRatingGetDataRatingSubscription');
        }
        // verify the required parameter 'bearer_type' is set
        if ($bearer_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bearer_type when calling crceOfflineRatingGetDataRatingSubscription');
        }
        // verify the required parameter 'duration' is set
        if ($duration === null) {
            throw new \InvalidArgumentException('Missing the required parameter $duration when calling crceOfflineRatingGetDataRatingSubscription');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetDataRatingSubscription');
        }
        // verify the required parameter 'rating_group' is set
        if ($rating_group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rating_group when calling crceOfflineRatingGetDataRatingSubscription');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetDataRatingSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline/data";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($accumulated_data !== null) {
            $queryParams['accumulatedData'] = $this->apiClient->getSerializer()->toQueryValue($accumulated_data);
        }
        // query params
        if ($bearer_type !== null) {
            $queryParams['bearerType'] = $this->apiClient->getSerializer()->toQueryValue($bearer_type);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($rating_group !== null) {
            $queryParams['ratingGroup'] = $this->apiClient->getSerializer()->toQueryValue($rating_group);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetDataRatingResponse',
                '/subscriptions/{subscriptionId}/charge/offline/data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetDataRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetDataRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetEventRating
     *
     * gets the rating information for events (SMS/MMS)
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $called_party the calledParty (required)
     * @param string $location the location (required)
     * @param string $message_type the messageType (required)
     * @param int $number_of_segments the numberOfSegments (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetEventRatingResponse
     */
    public function crceOfflineRatingGetEventRating($customer_account_id, $subscription_id, $called_party, $location, $message_type, $number_of_segments, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetEventRatingWithHttpInfo($customer_account_id, $subscription_id, $called_party, $location, $message_type, $number_of_segments, $roaming, $traffic_type, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetEventRatingWithHttpInfo
     *
     * gets the rating information for events (SMS/MMS)
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $called_party the calledParty (required)
     * @param string $location the location (required)
     * @param string $message_type the messageType (required)
     * @param int $number_of_segments the numberOfSegments (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetEventRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetEventRatingWithHttpInfo($customer_account_id, $subscription_id, $called_party, $location, $message_type, $number_of_segments, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineRatingGetEventRating');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetEventRating');
        }
        // verify the required parameter 'called_party' is set
        if ($called_party === null) {
            throw new \InvalidArgumentException('Missing the required parameter $called_party when calling crceOfflineRatingGetEventRating');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetEventRating');
        }
        // verify the required parameter 'message_type' is set
        if ($message_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_type when calling crceOfflineRatingGetEventRating');
        }
        // verify the required parameter 'number_of_segments' is set
        if ($number_of_segments === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_of_segments when calling crceOfflineRatingGetEventRating');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetEventRating');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceOfflineRatingGetEventRating');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/event";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($called_party !== null) {
            $queryParams['calledParty'] = $this->apiClient->getSerializer()->toQueryValue($called_party);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($message_type !== null) {
            $queryParams['messageType'] = $this->apiClient->getSerializer()->toQueryValue($message_type);
        }
        // query params
        if ($number_of_segments !== null) {
            $queryParams['numberOfSegments'] = $this->apiClient->getSerializer()->toQueryValue($number_of_segments);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // query params
        if ($traffic_type !== null) {
            $queryParams['trafficType'] = $this->apiClient->getSerializer()->toQueryValue($traffic_type);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetEventRatingResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/event'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetEventRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetEventRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetEventRatingSubscription
     *
     * gets the rating information for events (SMS/MMS)
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $called_party the calledParty (required)
     * @param string $location the location (required)
     * @param string $message_type the messageType (required)
     * @param int $number_of_segments the numberOfSegments (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetEventRatingResponse
     */
    public function crceOfflineRatingGetEventRatingSubscription($subscription_id, $called_party, $location, $message_type, $number_of_segments, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetEventRatingSubscriptionWithHttpInfo($subscription_id, $called_party, $location, $message_type, $number_of_segments, $roaming, $traffic_type, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetEventRatingSubscriptionWithHttpInfo
     *
     * gets the rating information for events (SMS/MMS)
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $called_party the calledParty (required)
     * @param string $location the location (required)
     * @param string $message_type the messageType (required)
     * @param int $number_of_segments the numberOfSegments (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetEventRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetEventRatingSubscriptionWithHttpInfo($subscription_id, $called_party, $location, $message_type, $number_of_segments, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetEventRatingSubscription');
        }
        // verify the required parameter 'called_party' is set
        if ($called_party === null) {
            throw new \InvalidArgumentException('Missing the required parameter $called_party when calling crceOfflineRatingGetEventRatingSubscription');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetEventRatingSubscription');
        }
        // verify the required parameter 'message_type' is set
        if ($message_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_type when calling crceOfflineRatingGetEventRatingSubscription');
        }
        // verify the required parameter 'number_of_segments' is set
        if ($number_of_segments === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_of_segments when calling crceOfflineRatingGetEventRatingSubscription');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetEventRatingSubscription');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceOfflineRatingGetEventRatingSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline/event";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($called_party !== null) {
            $queryParams['calledParty'] = $this->apiClient->getSerializer()->toQueryValue($called_party);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($message_type !== null) {
            $queryParams['messageType'] = $this->apiClient->getSerializer()->toQueryValue($message_type);
        }
        // query params
        if ($number_of_segments !== null) {
            $queryParams['numberOfSegments'] = $this->apiClient->getSerializer()->toQueryValue($number_of_segments);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // query params
        if ($traffic_type !== null) {
            $queryParams['trafficType'] = $this->apiClient->getSerializer()->toQueryValue($traffic_type);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetEventRatingResponse',
                '/subscriptions/{subscriptionId}/charge/offline/event'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetEventRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetEventRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetRatings
     *
     * gets the rating information for all types of traffic and events
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetRatingResponse
     */
    public function crceOfflineRatingGetRatings($customer_account_id, $subscription_id, $location, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetRatingsWithHttpInfo($customer_account_id, $subscription_id, $location, $roaming, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetRatingsWithHttpInfo
     *
     * gets the rating information for all types of traffic and events
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetRatingsWithHttpInfo($customer_account_id, $subscription_id, $location, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineRatingGetRatings');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetRatings');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetRatings');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetRatings');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetRatingResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetRatingsSubscription
     *
     * gets the rating information for all types of traffic and events
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetRatingResponse
     */
    public function crceOfflineRatingGetRatingsSubscription($subscription_id, $location, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetRatingsSubscriptionWithHttpInfo($subscription_id, $location, $roaming, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetRatingsSubscriptionWithHttpInfo
     *
     * gets the rating information for all types of traffic and events
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetRatingsSubscriptionWithHttpInfo($subscription_id, $location, $roaming, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetRatingsSubscription');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetRatingsSubscription');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetRatingsSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetRatingResponse',
                '/subscriptions/{subscriptionId}/charge/offline'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetSessionRating
     *
     * gets the rating information for voice sessions (MOC/MTC/MFC)
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $bearer_type the bearerType (required)
     * @param string $called_party the calledParty (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetSessionRatingResponse
     */
    public function crceOfflineRatingGetSessionRating($customer_account_id, $subscription_id, $bearer_type, $called_party, $duration, $location, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetSessionRatingWithHttpInfo($customer_account_id, $subscription_id, $bearer_type, $called_party, $duration, $location, $roaming, $traffic_type, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetSessionRatingWithHttpInfo
     *
     * gets the rating information for voice sessions (MOC/MTC/MFC)
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $bearer_type the bearerType (required)
     * @param string $called_party the calledParty (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetSessionRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetSessionRatingWithHttpInfo($customer_account_id, $subscription_id, $bearer_type, $called_party, $duration, $location, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling crceOfflineRatingGetSessionRating');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetSessionRating');
        }
        // verify the required parameter 'bearer_type' is set
        if ($bearer_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bearer_type when calling crceOfflineRatingGetSessionRating');
        }
        // verify the required parameter 'called_party' is set
        if ($called_party === null) {
            throw new \InvalidArgumentException('Missing the required parameter $called_party when calling crceOfflineRatingGetSessionRating');
        }
        // verify the required parameter 'duration' is set
        if ($duration === null) {
            throw new \InvalidArgumentException('Missing the required parameter $duration when calling crceOfflineRatingGetSessionRating');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetSessionRating');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetSessionRating');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceOfflineRatingGetSessionRating');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/session";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($bearer_type !== null) {
            $queryParams['bearerType'] = $this->apiClient->getSerializer()->toQueryValue($bearer_type);
        }
        // query params
        if ($called_party !== null) {
            $queryParams['calledParty'] = $this->apiClient->getSerializer()->toQueryValue($called_party);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // query params
        if ($traffic_type !== null) {
            $queryParams['trafficType'] = $this->apiClient->getSerializer()->toQueryValue($traffic_type);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetSessionRatingResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/charge/offline/session'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetSessionRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetSessionRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation crceOfflineRatingGetSessionRatingSubscription
     *
     * gets the rating information for voice sessions (MOC/MTC/MFC)
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $bearer_type the bearerType (required)
     * @param string $called_party the calledParty (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetSessionRatingResponse
     */
    public function crceOfflineRatingGetSessionRatingSubscription($subscription_id, $bearer_type, $called_party, $duration, $location, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        list($response) = $this->crceOfflineRatingGetSessionRatingSubscriptionWithHttpInfo($subscription_id, $bearer_type, $called_party, $duration, $location, $roaming, $traffic_type, $correlation_id, $transaction_id, $user);
        return $response;
    }

    /**
     * Operation crceOfflineRatingGetSessionRatingSubscriptionWithHttpInfo
     *
     * gets the rating information for voice sessions (MOC/MTC/MFC)
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $bearer_type the bearerType (required)
     * @param string $called_party the calledParty (required)
     * @param int $duration the duration (required)
     * @param string $location the location (required)
     * @param bool $roaming the roaming (required)
     * @param string $traffic_type the trafficType (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetSessionRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function crceOfflineRatingGetSessionRatingSubscriptionWithHttpInfo($subscription_id, $bearer_type, $called_party, $duration, $location, $roaming, $traffic_type, $correlation_id = null, $transaction_id = null, $user = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling crceOfflineRatingGetSessionRatingSubscription');
        }
        // verify the required parameter 'bearer_type' is set
        if ($bearer_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bearer_type when calling crceOfflineRatingGetSessionRatingSubscription');
        }
        // verify the required parameter 'called_party' is set
        if ($called_party === null) {
            throw new \InvalidArgumentException('Missing the required parameter $called_party when calling crceOfflineRatingGetSessionRatingSubscription');
        }
        // verify the required parameter 'duration' is set
        if ($duration === null) {
            throw new \InvalidArgumentException('Missing the required parameter $duration when calling crceOfflineRatingGetSessionRatingSubscription');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling crceOfflineRatingGetSessionRatingSubscription');
        }
        // verify the required parameter 'roaming' is set
        if ($roaming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roaming when calling crceOfflineRatingGetSessionRatingSubscription');
        }
        // verify the required parameter 'traffic_type' is set
        if ($traffic_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $traffic_type when calling crceOfflineRatingGetSessionRatingSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/charge/offline/session";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($bearer_type !== null) {
            $queryParams['bearerType'] = $this->apiClient->getSerializer()->toQueryValue($bearer_type);
        }
        // query params
        if ($called_party !== null) {
            $queryParams['calledParty'] = $this->apiClient->getSerializer()->toQueryValue($called_party);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($roaming !== null) {
            $queryParams['roaming'] = $this->apiClient->getSerializer()->toQueryValue($roaming);
        }
        // query params
        if ($traffic_type !== null) {
            $queryParams['trafficType'] = $this->apiClient->getSerializer()->toQueryValue($traffic_type);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetSessionRatingResponse',
                '/subscriptions/{subscriptionId}/charge/offline/session'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetSessionRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetSessionRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
