<?php
/**
 * HistoryApi
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iNew\Rest6_1\Api;

use \iNew\Rest6_1\ApiClient;
use \iNew\Rest6_1\ApiException;
use \iNew\Rest6_1\Configuration;
use \iNew\Rest6_1\ObjectSerializer;

/**
 * HistoryApi Class Doc Comment
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryApi
{
    /**
     * API Client
     *
     * @var \iNew\Rest6_1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \iNew\Rest6_1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\iNew\Rest6_1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \iNew\Rest6_1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \iNew\Rest6_1\ApiClient $apiClient set the API client
     *
     * @return HistoryApi
     */
    public function setApiClient(\iNew\Rest6_1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation historyHistoryServiceGetHistory
     *
     * returns the history
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param \DateTime $end_date the end date in ISO8601 format (optional)
     * @param int $end_week the end week (optional)
     * @param int $end_year the end year (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $sort_type the attribute results are sorted by (optional)
     * @param \DateTime $start_date the start date in ISO8601 format (optional)
     * @param int $start_week the start week (optional)
     * @param int $start_year the start year (optional)
     * @param string $sub_types a comma separated list consisting of the following constants [ADMINISTRATION, BUNDLE, CALL, CUSTOMER, DATA, DEVICE, FNF, GROUP, LOAN, MESSAGE, MONEY_TRANSFER, NOTIFICATION, PAYMENT, PAYMENT_PROFILE, POOL, REFERRAL, REFUND, SIM, SUBSCRIBER, SUBSCRIPTION, TARIFF, TOPUP, VOUCHER] (optional)
     * @param string $types a comma separated list consisting of the following constants [CONFIRMATION, CUSTOMER, LIFECYCLE, PAYMENT, RECHARGE, TRAFFIC] (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetHistoryResponse
     */
    public function historyHistoryServiceGetHistory($customer_account_id, $subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $end_date = null, $end_week = null, $end_year = null, $entities_per_page = null, $page = null, $sort_type = null, $start_date = null, $start_week = null, $start_year = null, $sub_types = null, $types = null)
    {
        list($response) = $this->historyHistoryServiceGetHistoryWithHttpInfo($customer_account_id, $subscription_id, $correlation_id, $transaction_id, $user, $end_date, $end_week, $end_year, $entities_per_page, $page, $sort_type, $start_date, $start_week, $start_year, $sub_types, $types);
        return $response;
    }

    /**
     * Operation historyHistoryServiceGetHistoryWithHttpInfo
     *
     * returns the history
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param \DateTime $end_date the end date in ISO8601 format (optional)
     * @param int $end_week the end week (optional)
     * @param int $end_year the end year (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $sort_type the attribute results are sorted by (optional)
     * @param \DateTime $start_date the start date in ISO8601 format (optional)
     * @param int $start_week the start week (optional)
     * @param int $start_year the start year (optional)
     * @param string $sub_types a comma separated list consisting of the following constants [ADMINISTRATION, BUNDLE, CALL, CUSTOMER, DATA, DEVICE, FNF, GROUP, LOAN, MESSAGE, MONEY_TRANSFER, NOTIFICATION, PAYMENT, PAYMENT_PROFILE, POOL, REFERRAL, REFUND, SIM, SUBSCRIBER, SUBSCRIPTION, TARIFF, TOPUP, VOUCHER] (optional)
     * @param string $types a comma separated list consisting of the following constants [CONFIRMATION, CUSTOMER, LIFECYCLE, PAYMENT, RECHARGE, TRAFFIC] (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetHistoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function historyHistoryServiceGetHistoryWithHttpInfo($customer_account_id, $subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $end_date = null, $end_week = null, $end_year = null, $entities_per_page = null, $page = null, $sort_type = null, $start_date = null, $start_week = null, $start_year = null, $sub_types = null, $types = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling historyHistoryServiceGetHistory');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling historyHistoryServiceGetHistory');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/subscriptions/{subscriptionId}/history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($end_week !== null) {
            $queryParams['endWeek'] = $this->apiClient->getSerializer()->toQueryValue($end_week);
        }
        // query params
        if ($end_year !== null) {
            $queryParams['endYear'] = $this->apiClient->getSerializer()->toQueryValue($end_year);
        }
        // query params
        if ($entities_per_page !== null) {
            $queryParams['entitiesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entities_per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($sort_type !== null) {
            $queryParams['sortType'] = $this->apiClient->getSerializer()->toQueryValue($sort_type);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($start_week !== null) {
            $queryParams['startWeek'] = $this->apiClient->getSerializer()->toQueryValue($start_week);
        }
        // query params
        if ($start_year !== null) {
            $queryParams['startYear'] = $this->apiClient->getSerializer()->toQueryValue($start_year);
        }
        // query params
        if ($sub_types !== null) {
            $queryParams['subTypes'] = $this->apiClient->getSerializer()->toQueryValue($sub_types);
        }
        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetHistoryResponse',
                '/customers/{customerAccountId}/subscriptions/{subscriptionId}/history'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetHistoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetHistoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation historyHistoryServiceGetHistoryCustomer
     *
     * returns the history
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param \DateTime $end_date the end date in ISO8601 format (optional)
     * @param int $end_week the end week (optional)
     * @param int $end_year the end year (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $sort_type the attribute results are sorted by (optional)
     * @param \DateTime $start_date the start date in ISO8601 format (optional)
     * @param int $start_week the start week (optional)
     * @param int $start_year the start year (optional)
     * @param string $sub_types a comma separated list consisting of the following constants [ADMINISTRATION, BUNDLE, CALL, CUSTOMER, DATA, DEVICE, FNF, GROUP, LOAN, MESSAGE, MONEY_TRANSFER, NOTIFICATION, PAYMENT, PAYMENT_PROFILE, POOL, REFERRAL, REFUND, SIM, SUBSCRIBER, SUBSCRIPTION, TARIFF, TOPUP, VOUCHER] (optional)
     * @param string $types a comma separated list consisting of the following constants [CONFIRMATION, CUSTOMER, LIFECYCLE, PAYMENT, RECHARGE, TRAFFIC] (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetHistoryResponse
     */
    public function historyHistoryServiceGetHistoryCustomer($customer_account_id, $correlation_id = null, $transaction_id = null, $user = null, $end_date = null, $end_week = null, $end_year = null, $entities_per_page = null, $page = null, $sort_type = null, $start_date = null, $start_week = null, $start_year = null, $sub_types = null, $types = null)
    {
        list($response) = $this->historyHistoryServiceGetHistoryCustomerWithHttpInfo($customer_account_id, $correlation_id, $transaction_id, $user, $end_date, $end_week, $end_year, $entities_per_page, $page, $sort_type, $start_date, $start_week, $start_year, $sub_types, $types);
        return $response;
    }

    /**
     * Operation historyHistoryServiceGetHistoryCustomerWithHttpInfo
     *
     * returns the history
     *
     * @param int $customer_account_id field used to represent the customer identifier, this request is intended for (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param \DateTime $end_date the end date in ISO8601 format (optional)
     * @param int $end_week the end week (optional)
     * @param int $end_year the end year (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $sort_type the attribute results are sorted by (optional)
     * @param \DateTime $start_date the start date in ISO8601 format (optional)
     * @param int $start_week the start week (optional)
     * @param int $start_year the start year (optional)
     * @param string $sub_types a comma separated list consisting of the following constants [ADMINISTRATION, BUNDLE, CALL, CUSTOMER, DATA, DEVICE, FNF, GROUP, LOAN, MESSAGE, MONEY_TRANSFER, NOTIFICATION, PAYMENT, PAYMENT_PROFILE, POOL, REFERRAL, REFUND, SIM, SUBSCRIBER, SUBSCRIPTION, TARIFF, TOPUP, VOUCHER] (optional)
     * @param string $types a comma separated list consisting of the following constants [CONFIRMATION, CUSTOMER, LIFECYCLE, PAYMENT, RECHARGE, TRAFFIC] (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetHistoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function historyHistoryServiceGetHistoryCustomerWithHttpInfo($customer_account_id, $correlation_id = null, $transaction_id = null, $user = null, $end_date = null, $end_week = null, $end_year = null, $entities_per_page = null, $page = null, $sort_type = null, $start_date = null, $start_week = null, $start_year = null, $sub_types = null, $types = null)
    {
        // verify the required parameter 'customer_account_id' is set
        if ($customer_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_account_id when calling historyHistoryServiceGetHistoryCustomer');
        }
        // parse inputs
        $resourcePath = "/customers/{customerAccountId}/history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($end_week !== null) {
            $queryParams['endWeek'] = $this->apiClient->getSerializer()->toQueryValue($end_week);
        }
        // query params
        if ($end_year !== null) {
            $queryParams['endYear'] = $this->apiClient->getSerializer()->toQueryValue($end_year);
        }
        // query params
        if ($entities_per_page !== null) {
            $queryParams['entitiesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entities_per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($sort_type !== null) {
            $queryParams['sortType'] = $this->apiClient->getSerializer()->toQueryValue($sort_type);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($start_week !== null) {
            $queryParams['startWeek'] = $this->apiClient->getSerializer()->toQueryValue($start_week);
        }
        // query params
        if ($start_year !== null) {
            $queryParams['startYear'] = $this->apiClient->getSerializer()->toQueryValue($start_year);
        }
        // query params
        if ($sub_types !== null) {
            $queryParams['subTypes'] = $this->apiClient->getSerializer()->toQueryValue($sub_types);
        }
        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($customer_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetHistoryResponse',
                '/customers/{customerAccountId}/history'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetHistoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetHistoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation historyHistoryServiceGetHistorySubscription
     *
     * returns the history
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param \DateTime $end_date the end date in ISO8601 format (optional)
     * @param int $end_week the end week (optional)
     * @param int $end_year the end year (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $sort_type the attribute results are sorted by (optional)
     * @param \DateTime $start_date the start date in ISO8601 format (optional)
     * @param int $start_week the start week (optional)
     * @param int $start_year the start year (optional)
     * @param string $sub_types a comma separated list consisting of the following constants [ADMINISTRATION, BUNDLE, CALL, CUSTOMER, DATA, DEVICE, FNF, GROUP, LOAN, MESSAGE, MONEY_TRANSFER, NOTIFICATION, PAYMENT, PAYMENT_PROFILE, POOL, REFERRAL, REFUND, SIM, SUBSCRIBER, SUBSCRIPTION, TARIFF, TOPUP, VOUCHER] (optional)
     * @param string $types a comma separated list consisting of the following constants [CONFIRMATION, CUSTOMER, LIFECYCLE, PAYMENT, RECHARGE, TRAFFIC] (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return \iNew\Rest6_1\Model\GetHistoryResponse
     */
    public function historyHistoryServiceGetHistorySubscription($subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $end_date = null, $end_week = null, $end_year = null, $entities_per_page = null, $page = null, $sort_type = null, $start_date = null, $start_week = null, $start_year = null, $sub_types = null, $types = null)
    {
        list($response) = $this->historyHistoryServiceGetHistorySubscriptionWithHttpInfo($subscription_id, $correlation_id, $transaction_id, $user, $end_date, $end_week, $end_year, $entities_per_page, $page, $sort_type, $start_date, $start_week, $start_year, $sub_types, $types);
        return $response;
    }

    /**
     * Operation historyHistoryServiceGetHistorySubscriptionWithHttpInfo
     *
     * returns the history
     *
     * @param int $subscription_id the subscription id (required)
     * @param string $correlation_id the correlation ID, to match a response with this request (will be generated if not provided) (optional)
     * @param string $transaction_id the transaction ID, if this request is part of a transaction that needs to be traceable (optional)
     * @param string $user the user making the request (optional)
     * @param \DateTime $end_date the end date in ISO8601 format (optional)
     * @param int $end_week the end week (optional)
     * @param int $end_year the end year (optional)
     * @param int $entities_per_page the number of entities that should be returned per page (pagination) (optional)
     * @param int $page the page requested (pagination) (optional)
     * @param string $sort_type the attribute results are sorted by (optional)
     * @param \DateTime $start_date the start date in ISO8601 format (optional)
     * @param int $start_week the start week (optional)
     * @param int $start_year the start year (optional)
     * @param string $sub_types a comma separated list consisting of the following constants [ADMINISTRATION, BUNDLE, CALL, CUSTOMER, DATA, DEVICE, FNF, GROUP, LOAN, MESSAGE, MONEY_TRANSFER, NOTIFICATION, PAYMENT, PAYMENT_PROFILE, POOL, REFERRAL, REFUND, SIM, SUBSCRIBER, SUBSCRIPTION, TARIFF, TOPUP, VOUCHER] (optional)
     * @param string $types a comma separated list consisting of the following constants [CONFIRMATION, CUSTOMER, LIFECYCLE, PAYMENT, RECHARGE, TRAFFIC] (optional)
     * @throws \iNew\Rest6_1\ApiException on non-2xx response
     * @return array of \iNew\Rest6_1\Model\GetHistoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function historyHistoryServiceGetHistorySubscriptionWithHttpInfo($subscription_id, $correlation_id = null, $transaction_id = null, $user = null, $end_date = null, $end_week = null, $end_year = null, $entities_per_page = null, $page = null, $sort_type = null, $start_date = null, $start_week = null, $start_year = null, $sub_types = null, $types = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling historyHistoryServiceGetHistorySubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscriptionId}/history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($end_week !== null) {
            $queryParams['endWeek'] = $this->apiClient->getSerializer()->toQueryValue($end_week);
        }
        // query params
        if ($end_year !== null) {
            $queryParams['endYear'] = $this->apiClient->getSerializer()->toQueryValue($end_year);
        }
        // query params
        if ($entities_per_page !== null) {
            $queryParams['entitiesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entities_per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($sort_type !== null) {
            $queryParams['sortType'] = $this->apiClient->getSerializer()->toQueryValue($sort_type);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($start_week !== null) {
            $queryParams['startWeek'] = $this->apiClient->getSerializer()->toQueryValue($start_week);
        }
        // query params
        if ($start_year !== null) {
            $queryParams['startYear'] = $this->apiClient->getSerializer()->toQueryValue($start_year);
        }
        // query params
        if ($sub_types !== null) {
            $queryParams['subTypes'] = $this->apiClient->getSerializer()->toQueryValue($sub_types);
        }
        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['correlationId'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // header params
        if ($transaction_id !== null) {
            $headerParams['transactionId'] = $this->apiClient->getSerializer()->toHeaderValue($transaction_id);
        }
        // header params
        if ($user !== null) {
            $headerParams['user'] = $this->apiClient->getSerializer()->toHeaderValue($user);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscriptionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accessKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['accessKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\iNew\Rest6_1\Model\GetHistoryResponse',
                '/subscriptions/{subscriptionId}/history'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\iNew\Rest6_1\Model\GetHistoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\GetHistoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\iNew\Rest6_1\Model\RestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
