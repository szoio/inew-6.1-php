<?php
/**
 * NotificationApiTest
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace iNew\Rest6_1;

use \iNew\Rest6_1\Configuration;
use \iNew\Rest6_1\ApiClient;
use \iNew\Rest6_1\ApiException;
use \iNew\Rest6_1\ObjectSerializer;

/**
 * NotificationApiTest Class Doc Comment
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceGetCategories
     *
     * returns the available notification categories.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceGetCategories()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceGetNotifications
     *
     * returns the available notifications for the given subscription.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceGetNotifications()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceGetNotificationsConfiguration
     *
     * returns the available notifications.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceGetNotificationsConfiguration()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceGetNotificationsSubscription
     *
     * returns the available notifications for the given subscription.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceGetNotificationsSubscription()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceSetNotificationPreferences
     *
     * sets the notification preferences.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceSetNotificationPreferences()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceSetNotificationPreferencesSubscription
     *
     * sets the notification preferences.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceSetNotificationPreferencesSubscription()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSend
     *
     * sends a notification to the given subscription based on a notification key and parameters.
     *
     */
    public function testSnaSubscriberNotificationServiceSend()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSendByCategory
     *
     * sends a notification to the given subscription with the given contents.
     *
     */
    public function testSnaSubscriberNotificationServiceSendByCategory()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSendByCategorySubscription
     *
     * sends a notification to the given subscription with the given contents.
     *
     */
    public function testSnaSubscriberNotificationServiceSendByCategorySubscription()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSendImmediate
     *
     * sends a SMS to the given subscription immediately with the given contents.
     *
     */
    public function testSnaSubscriberNotificationServiceSendImmediate()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSendImmediateSubscription
     *
     * sends a SMS to the given subscription immediately with the given contents.
     *
     */
    public function testSnaSubscriberNotificationServiceSendImmediateSubscription()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSendSubscription
     *
     * sends a notification to the given subscription based on a notification key and parameters.
     *
     */
    public function testSnaSubscriberNotificationServiceSendSubscription()
    {

    }

}
