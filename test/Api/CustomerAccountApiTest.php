<?php
/**
 * CustomerAccountApiTest
 * PHP version 5
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open REST API
 *
 * The Open REST API provides all available methods for integrators to access the I-New platform
 *
 * OpenAPI spec version: 6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace iNew\Rest6_1;

use \iNew\Rest6_1\Configuration;
use \iNew\Rest6_1\ApiClient;
use \iNew\Rest6_1\ApiException;
use \iNew\Rest6_1\ObjectSerializer;

/**
 * CustomerAccountApiTest Class Doc Comment
 *
 * @category Class
 * @package  iNew\Rest6_1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerAccountApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for crceAccountAdministrationAddBalance
     *
     * Adds an amount to a balance of a subscriber's account.
     *
     */
    public function testCrceAccountAdministrationAddBalance()
    {

    }

    /**
     * Test case for crceAccountAdministrationCancelReservation
     *
     * cancels a previous reservation made for the subscription.
     *
     */
    public function testCrceAccountAdministrationCancelReservation()
    {

    }

    /**
     * Test case for crceAccountAdministrationCommitCharge
     *
     * commits a previous reservation made for the subscription.
     *
     */
    public function testCrceAccountAdministrationCommitCharge()
    {

    }

    /**
     * Test case for crceAccountAdministrationCreateReservation
     *
     * create a reservation for charging a subscription.
     *
     */
    public function testCrceAccountAdministrationCreateReservation()
    {

    }

    /**
     * Test case for crceAccountAdministrationRefundBalance
     *
     * Refunds an amount from balance on a subscriber's account.
     *
     */
    public function testCrceAccountAdministrationRefundBalance()
    {

    }

    /**
     * Test case for crceAccountAdministrationSetBalance
     *
     * Set an amount as a balance on a subscriber's account.
     *
     */
    public function testCrceAccountAdministrationSetBalance()
    {

    }

    /**
     * Test case for crceAccountGetAccount
     *
     * returns the account for the given subscription and accountId.
     *
     */
    public function testCrceAccountGetAccount()
    {

    }

    /**
     * Test case for crceAccountGetAccountCurrencySummary
     *
     * returns the account summary for the given subscription and currency.
     *
     */
    public function testCrceAccountGetAccountCurrencySummary()
    {

    }

    /**
     * Test case for crceAccountGetAccounts
     *
     * returns the accounts for the given subscription.
     *
     */
    public function testCrceAccountGetAccounts()
    {

    }

    /**
     * Test case for crceAccountGetAccountsSummary
     *
     * returns the accounts summary grouped by currency for the given subscription.
     *
     */
    public function testCrceAccountGetAccountsSummary()
    {

    }

    /**
     * Test case for crceAccountGetCurrencyAccounts
     *
     * returns the accounts for the given subscription and currency.
     *
     */
    public function testCrceAccountGetCurrencyAccounts()
    {

    }

    /**
     * Test case for crceAccountGetMainAccount
     *
     * returns the main account for the given subscription.
     *
     */
    public function testCrceAccountGetMainAccount()
    {

    }

    /**
     * Test case for crceAccountGetMainAccountSummary
     *
     * returns the main account summary for the given subscription.
     *
     */
    public function testCrceAccountGetMainAccountSummary()
    {

    }

    /**
     * Test case for crceBundleAdministrationActivate
     *
     * activates the given bundle.
     *
     */
    public function testCrceBundleAdministrationActivate()
    {

    }

    /**
     * Test case for crceBundleAdministrationDeactivate
     *
     * deactivates the given bundle.
     *
     */
    public function testCrceBundleAdministrationDeactivate()
    {

    }

    /**
     * Test case for crceBundleAdministrationGetActive
     *
     * returns the activated bundles for the given parameters.
     *
     */
    public function testCrceBundleAdministrationGetActive()
    {

    }

    /**
     * Test case for crceBundleAdministrationGetAvailable
     *
     * returns the available bundles.
     *
     */
    public function testCrceBundleAdministrationGetAvailable()
    {

    }

    /**
     * Test case for crceCostControlDisableCostLimit
     *
     * disables cost control for the given parameters.
     *
     */
    public function testCrceCostControlDisableCostLimit()
    {

    }

    /**
     * Test case for crceCostControlGetCostLimitStatus
     *
     * retrieves the cost control limit status for the given parameters.
     *
     */
    public function testCrceCostControlGetCostLimitStatus()
    {

    }

    /**
     * Test case for crceCostControlGetCostLimits
     *
     * retrieves the cost control limits for the given subscription.
     *
     */
    public function testCrceCostControlGetCostLimits()
    {

    }

    /**
     * Test case for crceCostControlRestoreDefaultCostLimit
     *
     * restores the default provider cost control for the given parameters.
     *
     */
    public function testCrceCostControlRestoreDefaultCostLimit()
    {

    }

    /**
     * Test case for crceCostControlUpdateCostLimit
     *
     * updates the cost control limit with the given parameters.
     *
     */
    public function testCrceCostControlUpdateCostLimit()
    {

    }

    /**
     * Test case for crceCostControlUpdateCostLimitStatus
     *
     * updates the cost control used units with the given parameters.
     *
     */
    public function testCrceCostControlUpdateCostLimitStatus()
    {

    }

    /**
     * Test case for crceDataControlDisable
     *
     * Disables the use of charged data services for the subscription.
     *
     */
    public function testCrceDataControlDisable()
    {

    }

    /**
     * Test case for crceDataControlEnable
     *
     * Enables the use of charged data services for the subscription.
     *
     */
    public function testCrceDataControlEnable()
    {

    }

    /**
     * Test case for crceDataControlGetPolicy
     *
     * Returns the current data usage policies for the given subscription.
     *
     */
    public function testCrceDataControlGetPolicy()
    {

    }

    /**
     * Test case for crceDataControlGetStatus
     *
     * Returns the current status of the data control.
     *
     */
    public function testCrceDataControlGetStatus()
    {

    }

    /**
     * Test case for crceEmergencyLoanGetAvailableLoans
     *
     * Returns the loans, which can be requested by the subscriber.
     *
     */
    public function testCrceEmergencyLoanGetAvailableLoans()
    {

    }

    /**
     * Test case for crceEmergencyLoanGetLoanStatus
     *
     * Returns the status of the loan for a specific subscriber, including loaned amount, already repayed amount and outstanding amount.
     *
     */
    public function testCrceEmergencyLoanGetLoanStatus()
    {

    }

    /**
     * Test case for crceEmergencyLoanRepayLoan
     *
     * Repays (partially or fully) the subscriber’s loan.
     *
     */
    public function testCrceEmergencyLoanRepayLoan()
    {

    }

    /**
     * Test case for crceEmergencyLoanRequestLoan
     *
     * Requests the loan for a subscriber with as much amount the subscribers balance and profile is credible.
     *
     */
    public function testCrceEmergencyLoanRequestLoan()
    {

    }

    /**
     * Test case for crceExternalChargingChargeEvent
     *
     * charges an event performed by the subscription.
     *
     */
    public function testCrceExternalChargingChargeEvent()
    {

    }

    /**
     * Test case for crceFlexiPlanServiceGetPlanCustomerTemplate
     *
     * retrieves the plan template for the given flexiplan.
     *
     */
    public function testCrceFlexiPlanServiceGetPlanCustomerTemplate()
    {

    }

    /**
     * Test case for crceGroupAdministrationAddMember
     *
     * adds a member to the group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationAddMember()
    {

    }

    /**
     * Test case for crceGroupAdministrationAddMemberCustomer
     *
     * adds a member to the group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationAddMemberCustomer()
    {

    }

    /**
     * Test case for crceGroupAdministrationCreate
     *
     * creates a group (the given subscription will be the admin).
     *
     */
    public function testCrceGroupAdministrationCreate()
    {

    }

    /**
     * Test case for crceGroupAdministrationCreateCustomer
     *
     * creates a group (the given customer will be the admin).
     *
     */
    public function testCrceGroupAdministrationCreateCustomer()
    {

    }

    /**
     * Test case for crceGroupAdministrationDelete
     *
     * deletes a group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationDelete()
    {

    }

    /**
     * Test case for crceGroupAdministrationDeleteCustomer
     *
     * deletes a group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationDeleteCustomer()
    {

    }

    /**
     * Test case for crceGroupAdministrationGet
     *
     * gets the group details.
     *
     */
    public function testCrceGroupAdministrationGet()
    {

    }

    /**
     * Test case for crceGroupAdministrationGetCustomer
     *
     * gets the group details (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationGetCustomer()
    {

    }

    /**
     * Test case for crceGroupAdministrationLeave
     *
     * leaves the Community group.
     *
     */
    public function testCrceGroupAdministrationLeave()
    {

    }

    /**
     * Test case for crceGroupAdministrationRemoveMember
     *
     * removes a member from the group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationRemoveMember()
    {

    }

    /**
     * Test case for crceGroupAdministrationRemoveMemberCustomer
     *
     * removes a member from the group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationRemoveMemberCustomer()
    {

    }

    /**
     * Test case for crceGroupAdministrationUpdate
     *
     * updates a group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationUpdate()
    {

    }

    /**
     * Test case for crceGroupAdministrationUpdateCustomer
     *
     * updates a group (only works for the admin).
     *
     */
    public function testCrceGroupAdministrationUpdateCustomer()
    {

    }

    /**
     * Test case for crceIccaTransferMoney
     *
     * transfers money to another subscription.
     *
     */
    public function testCrceIccaTransferMoney()
    {

    }

    /**
     * Test case for crceIccaTransferResources
     *
     * transfers resources to another subscription.
     *
     */
    public function testCrceIccaTransferResources()
    {

    }

    /**
     * Test case for crceOfflineChargingChargeAdminEvent
     *
     * Method designed for charging various types of admin events, such as USSD, IVR actions or CRM commands.
     *
     */
    public function testCrceOfflineChargingChargeAdminEvent()
    {

    }

    /**
     * Test case for crceOfflineChargingChargeData
     *
     * Method designed for charging the data sessions.
     *
     */
    public function testCrceOfflineChargingChargeData()
    {

    }

    /**
     * Test case for crceOfflineChargingChargeEvent
     *
     * Method designed for charging the SMS services.
     *
     */
    public function testCrceOfflineChargingChargeEvent()
    {

    }

    /**
     * Test case for crceOfflineChargingChargeSession
     *
     * Method designed for charging the MOC, MTC and MFC sessions.
     *
     */
    public function testCrceOfflineChargingChargeSession()
    {

    }

    /**
     * Test case for crceOfflineChargingOfflineCharge
     *
     * performs offline charging.
     *
     */
    public function testCrceOfflineChargingOfflineCharge()
    {

    }

    /**
     * Test case for crceOfflineRatingGetDataRating
     *
     * gets the rating information for data sessions.
     *
     */
    public function testCrceOfflineRatingGetDataRating()
    {

    }

    /**
     * Test case for crceOfflineRatingGetEventRating
     *
     * gets the rating information for events (SMS/MMS).
     *
     */
    public function testCrceOfflineRatingGetEventRating()
    {

    }

    /**
     * Test case for crceOfflineRatingGetRatings
     *
     * gets the rating information for all types of traffic and events.
     *
     */
    public function testCrceOfflineRatingGetRatings()
    {

    }

    /**
     * Test case for crceOfflineRatingGetSessionRating
     *
     * gets the rating information for voice sessions (MOC/MTC/MFC).
     *
     */
    public function testCrceOfflineRatingGetSessionRating()
    {

    }

    /**
     * Test case for crceOnlinePaymentGetRecurringCharges
     *
     * gets recurring charges for the given OnlinePaymentProfile.
     *
     */
    public function testCrceOnlinePaymentGetRecurringCharges()
    {

    }

    /**
     * Test case for crceOnlinePaymentGetRecurringOnlinePayments
     *
     * gets recurring online payments for the given subscription.
     *
     */
    public function testCrceOnlinePaymentGetRecurringOnlinePayments()
    {

    }

    /**
     * Test case for crceOnlinePaymentGetRecurringOnlinePaymentsCustomer
     *
     * gets recurring online payments for the given customer.
     *
     */
    public function testCrceOnlinePaymentGetRecurringOnlinePaymentsCustomer()
    {

    }

    /**
     * Test case for crceOnlinePaymentUpdateBundle
     *
     * updates the payment method for the given bundle.
     *
     */
    public function testCrceOnlinePaymentUpdateBundle()
    {

    }

    /**
     * Test case for crceOnlinePaymentUpdatePlan
     *
     * updates the payment method for the given plan.
     *
     */
    public function testCrceOnlinePaymentUpdatePlan()
    {

    }

    /**
     * Test case for crceOverdraftGetOverdraftStatus
     *
     * gets the status of the overdraft functionality for the given subscription.
     *
     */
    public function testCrceOverdraftGetOverdraftStatus()
    {

    }

    /**
     * Test case for crcePoolAdministrationAcceptOffer
     *
     * accepts the offer to join the given pool (pool admin or pool user).
     *
     */
    public function testCrcePoolAdministrationAcceptOffer()
    {

    }

    /**
     * Test case for crcePoolAdministrationCreatePool
     *
     * creates a pool.
     *
     */
    public function testCrcePoolAdministrationCreatePool()
    {

    }

    /**
     * Test case for crcePoolAdministrationDeletePool
     *
     * deletes a pool.
     *
     */
    public function testCrcePoolAdministrationDeletePool()
    {

    }

    /**
     * Test case for crcePoolAdministrationGetPoolDetails
     *
     * gets the pooling status details (pool admin and user).
     *
     */
    public function testCrcePoolAdministrationGetPoolDetails()
    {

    }

    /**
     * Test case for crcePoolAdministrationLeavePool
     *
     * leave the given pool (pool user).
     *
     */
    public function testCrcePoolAdministrationLeavePool()
    {

    }

    /**
     * Test case for crcePoolAdministrationOffer
     *
     * sends an offer to join the pool to another subscription (pool admin).
     *
     */
    public function testCrcePoolAdministrationOffer()
    {

    }

    /**
     * Test case for crcePoolAdministrationRefuseOffer
     *
     * refuse the offer to join the given pool (pool user).
     *
     */
    public function testCrcePoolAdministrationRefuseOffer()
    {

    }

    /**
     * Test case for crcePoolAdministrationRemoveFromPool
     *
     * removes the given subscription from the pool (pool admin).
     *
     */
    public function testCrcePoolAdministrationRemoveFromPool()
    {

    }

    /**
     * Test case for crcePoolAdministrationRevokeOffer
     *
     * revokes the offer to join the pool for a subscription (pool admin).
     *
     */
    public function testCrcePoolAdministrationRevokeOffer()
    {

    }

    /**
     * Test case for crceSubscriberAddFlag
     *
     * adds a flag to the given subscription.
     *
     */
    public function testCrceSubscriberAddFlag()
    {

    }

    /**
     * Test case for crceSubscriberRemoveFlag
     *
     * removes a flag from the given subscription.
     *
     */
    public function testCrceSubscriberRemoveFlag()
    {

    }

    /**
     * Test case for crceSubscriberSearchByCustomer
     *
     * searches for subscription for the given customer.
     *
     */
    public function testCrceSubscriberSearchByCustomer()
    {

    }

    /**
     * Test case for crceTariffActivatePlan
     *
     * activates the given plan.
     *
     */
    public function testCrceTariffActivatePlan()
    {

    }

    /**
     * Test case for crceTariffChangeActivateTariff
     *
     * activates the tariff and charges the tariff change costs.
     *
     */
    public function testCrceTariffChangeActivateTariff()
    {

    }

    /**
     * Test case for crceTariffChangeGetAllAvailable
     *
     * returns all available tariff to which the subscription can be changed.
     *
     */
    public function testCrceTariffChangeGetAllAvailable()
    {

    }

    /**
     * Test case for crceTariffChangeGetAvailable
     *
     * returns the cost information for the desired tariff to activate.
     *
     */
    public function testCrceTariffChangeGetAvailable()
    {

    }

    /**
     * Test case for crceTariffDeactivatePlan
     *
     * deactivates the given plan.
     *
     */
    public function testCrceTariffDeactivatePlan()
    {

    }

    /**
     * Test case for crceTariffGetActivePlan
     *
     * returns the activated plan for the given parameters.
     *
     */
    public function testCrceTariffGetActivePlan()
    {

    }

    /**
     * Test case for crceTariffGetActiveTariff
     *
     * returns the active tariff for the given subscription.
     *
     */
    public function testCrceTariffGetActiveTariff()
    {

    }

    /**
     * Test case for crceTariffGetAvailablePlansCustomer
     *
     * returns the available plans.
     *
     */
    public function testCrceTariffGetAvailablePlansCustomer()
    {

    }

    /**
     * Test case for historyHistoryServiceGetHistory
     *
     * returns the history.
     *
     */
    public function testHistoryHistoryServiceGetHistory()
    {

    }

    /**
     * Test case for historyHistoryServiceGetHistoryCustomer
     *
     * returns the history.
     *
     */
    public function testHistoryHistoryServiceGetHistoryCustomer()
    {

    }

    /**
     * Test case for lcmCampaignSearchServiceGetEligible
     *
     * gets the campaigns the subscription is eligible for.
     *
     */
    public function testLcmCampaignSearchServiceGetEligible()
    {

    }

    /**
     * Test case for referralReferralServiceAssign
     *
     * Requests assignment of a referral code to the subscription which is then sent to the via preferred type of notification (SMS or email).
     *
     */
    public function testReferralReferralServiceAssign()
    {

    }

    /**
     * Test case for referralReferralServiceGetStatus
     *
     * queries the status of the subscription's referrals, such as its expire date and current amount of usages.
     *
     */
    public function testReferralReferralServiceGetStatus()
    {

    }

    /**
     * Test case for referralReferralServiceRedeem
     *
     * Validates the provided referral code and rewards the referral code user and owner.
     *
     */
    public function testReferralReferralServiceRedeem()
    {

    }

    /**
     * Test case for referralReferralServiceResend
     *
     * Resends already assigned referral code to the owner via preferred type of notification (SMS or email).
     *
     */
    public function testReferralReferralServiceResend()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceGetNotifications
     *
     * returns the available notifications for the given subscription.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceGetNotifications()
    {

    }

    /**
     * Test case for snaSubscriberNotificationAdministrationServiceSetNotificationPreferences
     *
     * sets the notification preferences.
     *
     */
    public function testSnaSubscriberNotificationAdministrationServiceSetNotificationPreferences()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSend
     *
     * sends a notification to the given subscription based on a notification key and parameters.
     *
     */
    public function testSnaSubscriberNotificationServiceSend()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSendByCategory
     *
     * sends a notification to the given subscription with the given contents.
     *
     */
    public function testSnaSubscriberNotificationServiceSendByCategory()
    {

    }

    /**
     * Test case for snaSubscriberNotificationServiceSendImmediate
     *
     * sends a SMS to the given subscription immediately with the given contents.
     *
     */
    public function testSnaSubscriberNotificationServiceSendImmediate()
    {

    }

    /**
     * Test case for topupTopupServiceCancel
     *
     * cancels the topup transaction.
     *
     */
    public function testTopupTopupServiceCancel()
    {

    }

    /**
     * Test case for topupTopupServiceCommit
     *
     * commits the topup transaction.
     *
     */
    public function testTopupTopupServiceCommit()
    {

    }

    /**
     * Test case for topupTopupServiceInit
     *
     * intializes the topup transaction.
     *
     */
    public function testTopupTopupServiceInit()
    {

    }

    /**
     * Test case for topupTopupServiceQuery
     *
     * queries the status of the topup transaction.
     *
     */
    public function testTopupTopupServiceQuery()
    {

    }

    /**
     * Test case for topupTopupServiceTopup
     *
     * performs an instant topup.
     *
     */
    public function testTopupTopupServiceTopup()
    {

    }

    /**
     * Test case for ucpOnlinePaymentProfileCreate
     *
     * creates an OnlinePaymentProfile.
     *
     */
    public function testUcpOnlinePaymentProfileCreate()
    {

    }

    /**
     * Test case for ucpOnlinePaymentProfileDelete
     *
     * deletes an OnlinePaymentProfile.
     *
     */
    public function testUcpOnlinePaymentProfileDelete()
    {

    }

    /**
     * Test case for ucpOnlinePaymentProfileGet
     *
     * gets an OnlinePaymentProfile.
     *
     */
    public function testUcpOnlinePaymentProfileGet()
    {

    }

    /**
     * Test case for ucpOnlinePaymentProfileGetOneClick
     *
     * gets the one click OnlinePaymentProfile.
     *
     */
    public function testUcpOnlinePaymentProfileGetOneClick()
    {

    }

    /**
     * Test case for ucpOnlinePaymentProfileSearch
     *
     * gets all OnlinePaymentProfiles for the given search parameters.
     *
     */
    public function testUcpOnlinePaymentProfileSearch()
    {

    }

    /**
     * Test case for ucpOnlinePaymentProfileUpdate
     *
     * updates an OnlinePaymentProfile.
     *
     */
    public function testUcpOnlinePaymentProfileUpdate()
    {

    }

    /**
     * Test case for ucpPaymentMethodCreate
     *
     * creates a credit card payment method.
     *
     */
    public function testUcpPaymentMethodCreate()
    {

    }

    /**
     * Test case for ucpPaymentMethodDelete
     *
     * deletes a credit card payment method.
     *
     */
    public function testUcpPaymentMethodDelete()
    {

    }

    /**
     * Test case for ucpPaymentMethodGet
     *
     * gets a credit card payment method.
     *
     */
    public function testUcpPaymentMethodGet()
    {

    }

    /**
     * Test case for ucpPaymentMethodSearch
     *
     * searches for credit card payment methods.
     *
     */
    public function testUcpPaymentMethodSearch()
    {

    }

    /**
     * Test case for ucpPaymentMethodUpdate
     *
     * updates a credit card payment method.
     *
     */
    public function testUcpPaymentMethodUpdate()
    {

    }

    /**
     * Test case for ucpSecurityServiceChangePin
     *
     * changes the pin for the given customerAccountId. Current pin needs to be provided.
     *
     */
    public function testUcpSecurityServiceChangePin()
    {

    }

    /**
     * Test case for ucpSecurityServiceDisableSecurity
     *
     * disables the security info for the given customerAccountId.
     *
     */
    public function testUcpSecurityServiceDisableSecurity()
    {

    }

    /**
     * Test case for ucpSecurityServiceEnableSecurity
     *
     * enables the security info for the given customerAccountId.
     *
     */
    public function testUcpSecurityServiceEnableSecurity()
    {

    }

    /**
     * Test case for ucpSecurityServiceGetSecurityStatus
     *
     * gets the security status for the given customerAccountId.
     *
     */
    public function testUcpSecurityServiceGetSecurityStatus()
    {

    }

    /**
     * Test case for ucpSecurityServiceInitialPinSetup
     *
     * sets up the pin for the given customerAccountId for the first time.
     *
     */
    public function testUcpSecurityServiceInitialPinSetup()
    {

    }

    /**
     * Test case for ucpSecurityServiceResetPin
     *
     * resets the pin for the given customerAccountId.
     *
     */
    public function testUcpSecurityServiceResetPin()
    {

    }

    /**
     * Test case for ucpSecurityServiceVerifyPin
     *
     * verifies the pin for the given customerAccountId.
     *
     */
    public function testUcpSecurityServiceVerifyPin()
    {

    }

    /**
     * Test case for vmsSubscriberServiceGetSubscriberBoxState
     *
     * retrieves the voice mail box state.
     *
     */
    public function testVmsSubscriberServiceGetSubscriberBoxState()
    {

    }

    /**
     * Test case for vmsSubscriberServiceSetSubscriberBoxState
     *
     * sets the voice mail box state.
     *
     */
    public function testVmsSubscriberServiceSetSubscriberBoxState()
    {

    }

}
